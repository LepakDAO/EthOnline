{
  "address": "0x0E3a5CfD46c9Db0fE611EE9195A736D43CDBe1A2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWorldID",
          "name": "_worldId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_membershipAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_action_id",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidNullifier",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "new_price",
          "type": "uint256"
        }
      ],
      "name": "MembershipPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "new_mods",
          "type": "address[]"
        }
      ],
      "name": "ModsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "NewMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "n_members",
          "type": "uint256"
        }
      ],
      "name": "NewTeam",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UserInfoURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMods",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "infoURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "joinWithEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "infoURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "joinWithoutEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "modLimit",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mods",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        }
      ],
      "name": "payForTeam",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "setMembershipPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_newMods",
          "type": "address[]"
        }
      ],
      "name": "setMods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usersPaid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f045ed2f37ef487a5758d4c45b38859eed4f107cf56a9377004633d944f4ab0",
  "receipt": {
    "to": null,
    "from": "0x4bdB8234AD81F26985d257F36a2d2d8c30365546",
    "contractAddress": "0x0E3a5CfD46c9Db0fE611EE9195A736D43CDBe1A2",
    "transactionIndex": 42,
    "gasUsed": "2089855",
    "logsBloom": "0x
    "blockHash": "0xd41729b4009e4a9f386009e53c07fc6b1ddf81d27f4aad8b2dd3486c56cb4a21",
    "transactionHash": "0x9f045ed2f37ef487a5758d4c45b38859eed4f107cf56a9377004633d944f4ab0",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 28219667,
        "transactionHash": "0x9f045ed2f37ef487a5758d4c45b38859eed4f107cf56a9377004633d944f4ab0",
        "address": "0x0E3a5CfD46c9Db0fE611EE9195A736D43CDBe1A2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004bdb8234ad81f26985d257f36a2d2d8c30365546"
        ],
        "data": "0x",
        "logIndex": 239,
        "blockHash": "0xd41729b4009e4a9f386009e53c07fc6b1ddf81d27f4aad8b2dd3486c56cb4a21"
      },
      {
        "transactionIndex": 42,
        "blockNumber": 28219667,
        "transactionHash": "0x9f045ed2f37ef487a5758d4c45b38859eed4f107cf56a9377004633d944f4ab0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004bdb8234ad81f26985d257f36a2d2d8c30365546",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000b23116d5c510000000000000000000000000000000000000000000000000017478501e1c932b500000000000000000000000000000000000000000000008af16c9237e3a01645000000000000000000000000000000000000000000000000173c61f0746ce1b500000000000000000000000000000000000000000000008af177b54950fc6745",
        "logIndex": 240,
        "blockHash": "0xd41729b4009e4a9f386009e53c07fc6b1ddf81d27f4aad8b2dd3486c56cb4a21"
      }
    ],
    "blockNumber": 28219667,
    "cumulativeGasUsed": "10209468",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xABB70f7F39035586Da57B3c8136035f87AC0d2Aa",
    "0x98C4ccD4f22d865f9b2ec3cA9F64b97BfD22407D",
    "wid_staging_85f9d1b6ab3027c3d5026fbb30a41998"
  ],
  "numDeployments": 1,
  "solcInputHash": "06d6d49c23e08c836e72d977f97d36aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWorldID\",\"name\":\"_worldId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_membershipAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_action_id\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidNullifier\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_price\",\"type\":\"uint256\"}],\"name\":\"MembershipPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"new_mods\",\"type\":\"address[]\"}],\"name\":\"ModsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"NewMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"n_members\",\"type\":\"uint256\"}],\"name\":\"NewTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserInfoURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMods\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"infoURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"joinWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"infoURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"joinWithoutEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modLimit\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mods\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"payForTeam\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setMembershipPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newMods\",\"type\":\"address[]\"}],\"name\":\"setMods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersPaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"worldId\":{\"details\":\"worldcoin verification*\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LepakCore.sol\":\"LepakCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Interfaces/ILepakMembership.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface ILepakMembership {\\n    function provide(address _user) external;\\n    function revoke(address _user) external;\\n    function tokenURI(uint256 tokenId) external view;\\n    function setPriceEth(uint256 _newPrice) external;\\n    function updateThresholds(uint256[3] memory _newThresholds) external;\\n    function currentPriceEth() external view returns (uint256);\\n    function balanceOf(address _user) external view returns (uint256);\\n}\",\"keccak256\":\"0xb8aac81a5f22c31bce0e44271393d0592550d62fb4b5229a3fe0529738066409\"},\"contracts/Interfaces/IWorldId.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWorldID {\\n    /// @notice Reverts if the zero-knowledge proof is invalid.\\n    /// @param root The of the Merkle tree\\n    /// @param groupId The id of the Semaphore group\\n    /// @param signalHash A keccak256 hash of the Semaphore signal\\n    /// @param nullifierHash The nullifier hash\\n    /// @param externalNullifierHash A keccak256 hash of the external nullifier\\n    /// @param proof The zero-knowledge proof\\n    /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\\n    function verifyProof(\\n        uint256 root,\\n        uint256 groupId,\\n        uint256 signalHash,\\n        uint256 nullifierHash,\\n        uint256 externalNullifierHash,\\n        uint256[8] calldata proof\\n    ) external view;\\n}\",\"keccak256\":\"0x0e48b38618c0adf1de814097db7b6e99b549926948ea73214dda0539780f5fb0\",\"license\":\"MIT\"},\"contracts/LepakCore.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { ByteHasher } from \\\"./helpers/ByteHasher.sol\\\";\\nimport { IWorldID } from \\\"./Interfaces/IWorldId.sol\\\";\\nimport { ILepakMembership } from \\\"./Interfaces/ILepakMembership.sol\\\";\\n\\nstruct shortProposal {\\n    address targetContract;\\n    string call;\\n}\\n\\ncontract LepakCore is Ownable{\\n    using ByteHasher for bytes;\\n    using SafeMath for uint256;\\n\\n    event NewMember(address member,uint256 fee);\\n    event NewTeam(uint256 n_members);\\n    event ModsUpdated(address[] new_mods);\\n    event MembershipPriceUpdated(uint256 new_price);\\n\\n    mapping(address => string) public UserInfoURI;\\n    mapping(address => bool) public usersPaid;\\n    mapping(address => bool) public isMod;\\n    uint8 public modLimit = 5;\\n    ILepakMembership membership;\\n    address[] public mods;\\n    \\n    /**\\n    ** @dev worldcoin verification\\n    **/\\n    \\n    IWorldID internal worldId;\\n    string internal action_id;\\n    uint256 internal groupId = 1;\\n    mapping(uint256 => bool) internal nullifierHashes;\\n    error InvalidNullifier();\\n\\n    constructor(IWorldID _worldId, address _membershipAddr, string memory _action_id) {\\n        worldId = _worldId;\\n        membership = ILepakMembership(_membershipAddr);\\n        action_id = _action_id;\\n    }\\n\\n    modifier onlyMod () {\\n        require (isMod[msg.sender], \\\"caller is not a moderator\\\");\\n        _;\\n    }\\n\\n    modifier onlyModOrOwner () {\\n        require (isMod[msg.sender] || super.owner() == msg.sender, \\\"caller is not a moderator or owner\\\");\\n        _;\\n    }\\n\\n    function payForTeam(address[] calldata _members) external payable {\\n        uint256 len = _members.length;     \\n        require(msg.value >= len.mul(membership.currentPriceEth()),\\\"Not enough funds\\\");\\n        for(uint i=0;i<len;i++){\\n            usersPaid[_members[i]] = true;\\n        }\\n        emit NewTeam(len);\\n    }\\n\\n    function joinWithoutEth(\\n        string memory infoURI,\\n        address _caller,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256[8] calldata proof\\n    ) external {\\n        // require(usersPaid[msg.sender],\\\"user hasnt paid yet\\\");\\n        _verifyPoP(_caller,root,nullifierHash,proof);\\n        UserInfoURI[msg.sender] = infoURI;\\n\\n        //uncomment this\\n        // membership.provide(msg.sender);\\n        \\n        emit NewMember(msg.sender, membership.currentPriceEth());\\n    }\\n\\n    function joinWithEth(\\n        string calldata infoURI,\\n        address _caller,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256[8] calldata proof\\n    ) external payable {\\n        // require(msg.value >= membership.currentPriceEth(),\\\"Not enough funds\\\");\\n        _verifyPoP(_caller,root,nullifierHash,proof);\\n        UserInfoURI[msg.sender] = infoURI;\\n        membership.provide(msg.sender);\\n        emit NewMember(msg.sender, msg.value);\\n    }\\n\\n    // function testWorldCoin(\\n    //     address caller,\\n    //     uint256 root,\\n    //     uint256 nullifierHash,\\n    //     uint256[8] calldata proof\\n    // ) external {\\n\\n    //     if (nullifierHashes[nullifierHash]) revert InvalidNullifier();\\n    //     worldId.verifyProof(\\n    //         root,\\n    //         groupId,\\n    //         abi.encodePacked(caller).hashToField(),\\n    //         nullifierHash,\\n    //         abi.encodePacked(action_id).hashToField(),\\n    //         proof\\n    //     );\\n\\n    //     // finally, we record they've done this, so they can't do it again (proof of uniqueness)\\n    //     nullifierHashes[nullifierHash] = true;\\n\\n    // }\\n\\n    /**\\n    ** @dev worldcoin verification\\n    **/\\n\\n    function _verifyPoP(\\n        address caller,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256[8] calldata proof\\n    ) internal {\\n\\n        //uncomment this\\n        // if (nullifierHashes[nullifierHash]) revert InvalidNullifier();\\n        worldId.verifyProof(\\n            root,\\n            groupId,\\n            abi.encodePacked(caller).hashToField(),\\n            nullifierHash,\\n            abi.encodePacked(action_id).hashToField(),\\n            proof\\n        );\\n\\n        // finally, we record they've done this, so they can't do it again (proof of uniqueness)\\n        nullifierHashes[nullifierHash] = true;\\n\\n    }\\n\\n    function setMods(address[] calldata _newMods) external onlyOwner {\\n        uint256 len = _newMods.length;\\n        uint256 prev_len = mods.length;\\n        address[] memory temp = new address[](len);\\n\\n        require(len <= modLimit, \\\"max number of mods is 5\\\");\\n\\n        for(uint256 i=0;i<prev_len;i++){\\n            isMod[mods[i]] = false;\\n        }\\n        for(uint256 i=0;i<len;i++){\\n            temp[i] = (_newMods[i]);\\n            isMod[_newMods[i]] = true;\\n        }\\n        mods = temp;\\n\\n        emit ModsUpdated(temp);\\n\\n    }\\n    function setMembershipPrice(uint256 _newPrice) external  onlyModOrOwner {\\n        membership.setPriceEth(_newPrice);\\n        emit MembershipPriceUpdated(_newPrice);\\n    }\\n\\n    function getMods() external view returns (address[] memory){\\n        return mods;\\n    }\\n    function isMember(address _user) external view returns (bool){\\n        return (membership.balanceOf(_user) > uint256(0)\\n                || super.owner() == _user\\n                || isMod[_user]);\\n    }\\n}\",\"keccak256\":\"0x19914a67e5606a91d482268b7547f8276328f201a624e9f34e474b4b7ef8eebd\"},\"contracts/helpers/ByteHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary ByteHasher {\\n    /// @dev Creates a keccak256 hash of a bytestring.\\n    /// @param value The bytestring to hash\\n    /// @return The hash of the specified value\\n    /// @dev `>> 8` makes sure that the result is included in our field\\n    function hashToField(bytes memory value) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\\n    }\\n}\",\"keccak256\":\"0xdf7abea628f202e09d500fd6e1d27c6e900a088f2a79ae4870463d13fc888d65\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c8063846d0bb91161008a578063a230c52411610059578063a230c524146102c6578063c00af42c14610303578063e07540e414610340578063f2fde38b14610369576100e8565b8063846d0bb9146102195780638988b284146102355780638da5cb5b146102725780639bb40d831461029d576100e8565b80635dcce7ed116100c65780635dcce7ed1461018057806366b9b5631461019c57806369d5f38a146101d9578063715018a614610202576100e8565b80633b33ac32146100ed5780634d078f481461011857806354e6845414610143575b600080fd5b3480156100f957600080fd5b50610102610392565b60405161010f9190611553565b60405180910390f35b34801561012457600080fd5b5061012d610420565b60405161013a9190611591565b60405180910390f35b34801561014f57600080fd5b5061016a600480360381019061016591906115ec565b610433565b6040516101779190611634565b60405180910390f35b61019a600480360381019061019591906116b4565b610453565b005b3480156101a857600080fd5b506101c360048036038101906101be91906115ec565b610629565b6040516101d0919061179a565b60405180910390f35b3480156101e557600080fd5b5061020060048036038101906101fb91906117f2565b6106c9565b005b34801561020e57600080fd5b50610217610859565b005b610233600480360381019061022e9190611897565b61086d565b005b34801561024157600080fd5b5061025c600480360381019061025791906115ec565b610996565b6040516102699190611634565b60405180910390f35b34801561027e57600080fd5b506102876109b6565b6040516102949190611941565b60405180910390f35b3480156102a957600080fd5b506102c460048036038101906102bf9190611a8c565b6109df565b005b3480156102d257600080fd5b506102ed60048036038101906102e891906115ec565b610b1e565b6040516102fa9190611634565b60405180910390f35b34801561030f57600080fd5b5061032a600480360381019061032591906117f2565b610c65565b6040516103379190611941565b60405180910390f35b34801561034c57600080fd5b50610367600480360381019061036291906116b4565b610ca4565b005b34801561037557600080fd5b50610390600480360381019061038b91906115ec565b610f7d565b005b6060600580548060200260200160405190810160405280929190818152602001828054801561041657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103cc575b5050505050905090565b600460009054906101000a900460ff1681565b60026020528060005260406000206000915054906101000a900460ff1681565b600082829050905061050d600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e413e2bc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe9190611b39565b8261100190919063ffffffff16565b34101561054f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054690611bb2565b60405180910390fd5b60005b818110156105ec5760016002600086868581811061057357610572611bd2565b5b905060200201602081019061058891906115ec565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806105e490611c30565b915050610552565b507fa90ad43b37352ebc1e46954a3f2d064584b9afe4c9dbb1f88d191260e12a410e8160405161061c9190611c88565b60405180910390a1505050565b6001602052806000526040600020600091509050805461064890611cd2565b80601f016020809104026020016040519081016040528092919081815260200182805461067490611cd2565b80156106c15780601f10610696576101008083540402835291602001916106c1565b820191906000526020600020905b8154815290600101906020018083116106a457829003601f168201915b505050505081565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168061075357503373ffffffffffffffffffffffffffffffffffffffff1661073b6109b6565b73ffffffffffffffffffffffffffffffffffffffff16145b610792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078990611d76565b60405180910390fd5b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630249d624826040518263ffffffff1660e01b81526004016107ed9190611c88565b600060405180830381600087803b15801561080757600080fd5b505af115801561081b573d6000803e3d6000fd5b505050507fe3b51bfc59d6e44e4da024e028d277b0284e6695cce36d919aea83e2c7de28438160405161084e9190611c88565b60405180910390a150565b610861611017565b61086b6000611095565b565b61087984848484611159565b8585600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091906108c79291906112b0565b50600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631803aa33336040518263ffffffff1660e01b81526004016109239190611941565b600060405180830381600087803b15801561093d57600080fd5b505af1158015610951573d6000803e3d6000fd5b505050507f7f48e4f7f3ef2c63408b16a799b8516cb879c145386aedd51a36938a02a1c2833334604051610986929190611d96565b60405180910390a1505050505050565b60036020528060005260406000206000915054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6109eb84848484611159565b84600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190610a3e929190611336565b507f7f48e4f7f3ef2c63408b16a799b8516cb879c145386aedd51a36938a02a1c28333600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e413e2bc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac957600080fd5b505afa158015610add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b019190611b39565b604051610b0f929190611d96565b60405180910390a15050505050565b600080600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401610b7c9190611941565b60206040518083038186803b158015610b9457600080fd5b505afa158015610ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcc9190611b39565b1180610c0a57508173ffffffffffffffffffffffffffffffffffffffff16610bf26109b6565b73ffffffffffffffffffffffffffffffffffffffff16145b80610c5e5750600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b9050919050565b60058181548110610c7557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610cac611017565b60008282905090506000600580549050905060008267ffffffffffffffff811115610cda57610cd9611961565b5b604051908082528060200260200182016040528015610d085781602001602082028036833780820191505090505b509050600460009054906101000a900460ff1660ff16831115610d60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5790611e0b565b60405180910390fd5b60005b82811015610e145760006003600060058481548110610d8557610d84611bd2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610e0c90611c30565b915050610d63565b5060005b83811015610f2757858582818110610e3357610e32611bd2565b5b9050602002016020810190610e4891906115ec565b828281518110610e5b57610e5a611bd2565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600160036000888885818110610eae57610ead611bd2565b5b9050602002016020810190610ec391906115ec565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610f1f90611c30565b915050610e18565b508060059080519060200190610f3e9291906113bc565b507f271382085bd3790c7702e021ba0fc6d8369de53f765d04ffcd8fd3c75cde0fea81604051610f6e9190611553565b60405180910390a15050505050565b610f85611017565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ff5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fec90611e9d565b60405180910390fd5b610ffe81611095565b50565b6000818361100f9190611ebd565b905092915050565b61101f611271565b73ffffffffffffffffffffffffffffffffffffffff1661103d6109b6565b73ffffffffffffffffffffffffffffffffffffffff1614611093576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108a90611f63565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633bc778e3846008546111c3886040516020016111af9190611fcb565b604051602081830303815290604052611279565b866111ed60076040516020016111d99190612085565b604051602081830303815290604052611279565b876040518763ffffffff1660e01b815260040161120f969594939291906120ad565b60006040518083038186803b15801561122757600080fd5b505afa15801561123b573d6000803e3d6000fd5b5050505060016009600084815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b600033905090565b600060088260405160200161128e9190612156565b6040516020818303038152906040528051906020012060001c901c9050919050565b8280546112bc90611cd2565b90600052602060002090601f0160209004810192826112de5760008555611325565b82601f106112f757803560ff1916838001178555611325565b82800160010185558215611325579182015b82811115611324578235825591602001919060010190611309565b5b5090506113329190611446565b5090565b82805461134290611cd2565b90600052602060002090601f01602090048101928261136457600085556113ab565b82601f1061137d57805160ff19168380011785556113ab565b828001600101855582156113ab579182015b828111156113aa57825182559160200191906001019061138f565b5b5090506113b89190611446565b5090565b828054828255906000526020600020908101928215611435579160200282015b828111156114345782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906113dc565b5b5090506114429190611446565b5090565b5b8082111561145f576000816000905550600101611447565b5090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114ba8261148f565b9050919050565b6114ca816114af565b82525050565b60006114dc83836114c1565b60208301905092915050565b6000602082019050919050565b600061150082611463565b61150a818561146e565b93506115158361147f565b8060005b8381101561154657815161152d88826114d0565b9750611538836114e8565b925050600181019050611519565b5085935050505092915050565b6000602082019050818103600083015261156d81846114f5565b905092915050565b600060ff82169050919050565b61158b81611575565b82525050565b60006020820190506115a66000830184611582565b92915050565b6000604051905090565b600080fd5b600080fd5b6115c9816114af565b81146115d457600080fd5b50565b6000813590506115e6816115c0565b92915050565b600060208284031215611602576116016115b6565b5b6000611610848285016115d7565b91505092915050565b60008115159050919050565b61162e81611619565b82525050565b60006020820190506116496000830184611625565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126116745761167361164f565b5b8235905067ffffffffffffffff81111561169157611690611654565b5b6020830191508360208202830111156116ad576116ac611659565b5b9250929050565b600080602083850312156116cb576116ca6115b6565b5b600083013567ffffffffffffffff8111156116e9576116e86115bb565b5b6116f58582860161165e565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561173b578082015181840152602081019050611720565b8381111561174a576000848401525b50505050565b6000601f19601f8301169050919050565b600061176c82611701565b611776818561170c565b935061178681856020860161171d565b61178f81611750565b840191505092915050565b600060208201905081810360008301526117b48184611761565b905092915050565b6000819050919050565b6117cf816117bc565b81146117da57600080fd5b50565b6000813590506117ec816117c6565b92915050565b600060208284031215611808576118076115b6565b5b6000611816848285016117dd565b91505092915050565b60008083601f8401126118355761183461164f565b5b8235905067ffffffffffffffff81111561185257611851611654565b5b60208301915083600182028301111561186e5761186d611659565b5b9250929050565b60008190508260206008028201111561189157611890611659565b5b92915050565b60008060008060008061018087890312156118b5576118b46115b6565b5b600087013567ffffffffffffffff8111156118d3576118d26115bb565b5b6118df89828a0161181f565b965096505060206118f289828a016115d7565b945050604061190389828a016117dd565b935050606061191489828a016117dd565b925050608061192589828a01611875565b9150509295509295509295565b61193b816114af565b82525050565b60006020820190506119566000830184611932565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61199982611750565b810181811067ffffffffffffffff821117156119b8576119b7611961565b5b80604052505050565b60006119cb6115ac565b90506119d78282611990565b919050565b600067ffffffffffffffff8211156119f7576119f6611961565b5b611a0082611750565b9050602081019050919050565b82818337600083830152505050565b6000611a2f611a2a846119dc565b6119c1565b905082815260208101848484011115611a4b57611a4a61195c565b5b611a56848285611a0d565b509392505050565b600082601f830112611a7357611a7261164f565b5b8135611a83848260208601611a1c565b91505092915050565b60008060008060006101808688031215611aa957611aa86115b6565b5b600086013567ffffffffffffffff811115611ac757611ac66115bb565b5b611ad388828901611a5e565b9550506020611ae4888289016115d7565b9450506040611af5888289016117dd565b9350506060611b06888289016117dd565b9250506080611b1788828901611875565b9150509295509295909350565b600081519050611b33816117c6565b92915050565b600060208284031215611b4f57611b4e6115b6565b5b6000611b5d84828501611b24565b91505092915050565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b6000611b9c60108361170c565b9150611ba782611b66565b602082019050919050565b60006020820190508181036000830152611bcb81611b8f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c3b826117bc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611c6e57611c6d611c01565b5b600182019050919050565b611c82816117bc565b82525050565b6000602082019050611c9d6000830184611c79565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611cea57607f821691505b60208210811415611cfe57611cfd611ca3565b5b50919050565b7f63616c6c6572206973206e6f742061206d6f64657261746f72206f72206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000611d6060228361170c565b9150611d6b82611d04565b604082019050919050565b60006020820190508181036000830152611d8f81611d53565b9050919050565b6000604082019050611dab6000830185611932565b611db86020830184611c79565b9392505050565b7f6d6178206e756d626572206f66206d6f64732069732035000000000000000000600082015250565b6000611df560178361170c565b9150611e0082611dbf565b602082019050919050565b60006020820190508181036000830152611e2481611de8565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611e8760268361170c565b9150611e9282611e2b565b604082019050919050565b60006020820190508181036000830152611eb681611e7a565b9050919050565b6000611ec8826117bc565b9150611ed3836117bc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611f0c57611f0b611c01565b5b828202905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611f4d60208361170c565b9150611f5882611f17565b602082019050919050565b60006020820190508181036000830152611f7c81611f40565b9050919050565b60008160601b9050919050565b6000611f9b82611f83565b9050919050565b6000611fad82611f90565b9050919050565b611fc5611fc0826114af565b611fa2565b82525050565b6000611fd78284611fb4565b60148201915081905092915050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461201381611cd2565b61201d8186611fe6565b9450600182166000811461203857600181146120495761207c565b60ff1983168652818601935061207c565b61205285611ff1565b60005b8381101561207457815481890152600182019150602081019050612055565b838801955050505b50505092915050565b60006120918284612006565b915081905092915050565b6120a96101008383611a0d565b5050565b60006101a0820190506120c36000830189611c79565b6120d06020830188611c79565b6120dd6040830187611c79565b6120ea6060830186611c79565b6120f76080830185611c79565b61210460a083018461209c565b979650505050505050565b600081519050919050565b600081905092915050565b60006121308261210f565b61213a818561211a565b935061214a81856020860161171d565b80840191505092915050565b60006121628284612125565b91508190509291505056fea26469706673582212206d43f226e0a48b06e8b94878eabb2a91746b2f4644f8330698174a1067b094ad64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "worldId": {
        "details": "worldcoin verification*"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 630,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "UserInfoURI",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 634,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "usersPaid",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 638,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "isMod",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 641,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "modLimit",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 644,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "membership",
        "offset": 1,
        "slot": "4",
        "type": "t_contract(ILepakMembership)562"
      },
      {
        "astId": 647,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "mods",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 651,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "worldId",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IWorldID)583"
      },
      {
        "astId": 653,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "action_id",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 656,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "groupId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 660,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILepakMembership)562": {
        "encoding": "inplace",
        "label": "contract ILepakMembership",
        "numberOfBytes": "20"
      },
      "t_contract(IWorldID)583": {
        "encoding": "inplace",
        "label": "contract IWorldID",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}