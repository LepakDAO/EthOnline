{
  "language": "Solidity",
  "sources": {
    "contracts/LepakCore.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport { ByteHasher } from \"./helpers/ByteHasher.sol\";\nimport { IWorldID } from \"./Interfaces/IWorldId.sol\";\nimport { ILepakMembership } from \"./Interfaces/ILepakMembership.sol\";\n\nstruct shortProposal {\n    address targetContract;\n    string call;\n}\n\ncontract LepakCore is Ownable{\n    using ByteHasher for bytes;\n    using SafeMath for uint256;\n\n    event NewMember(address member,uint256 fee);\n    event NewTeam(uint256 n_members);\n    event ModsUpdated(address[] new_mods);\n    event MembershipPriceUpdated(uint256 new_price);\n\n    mapping(address => string) public UserInfoURI;\n    mapping(address => bool) public usersPaid;\n    mapping(address => bool) public isMod;\n    uint8 public modLimit = 5;\n    ILepakMembership membership;\n    address[] public mods;\n    \n    /**\n    ** @dev worldcoin verification\n    **/\n    \n    IWorldID internal worldId;\n    string internal action_id;\n    uint256 internal groupId = 1;\n    mapping(uint256 => bool) internal nullifierHashes;\n    error InvalidNullifier();\n\n    constructor(IWorldID _worldId, address _membershipAddr, string memory _action_id) {\n        worldId = _worldId;\n        membership = ILepakMembership(_membershipAddr);\n        action_id = _action_id;\n    }\n\n    modifier onlyMod () {\n        require (isMod[msg.sender], \"caller is not a moderator\");\n        _;\n    }\n\n    modifier onlyModOrOwner () {\n        require (isMod[msg.sender] || super.owner() == msg.sender, \"caller is not a moderator or owner\");\n        _;\n    }\n\n    function payForTeam(address[] calldata _members) external payable {\n        uint256 len = _members.length;     \n        require(msg.value >= len.mul(membership.currentPriceEth()),\"Not enough funds\");\n        for(uint i=0;i<len;i++){\n            usersPaid[_members[i]] = true;\n        }\n        emit NewTeam(len);\n    }\n\n    function joinWithoutEth(\n        string memory infoURI,\n        address _caller,\n        uint256 root,\n        uint256 nullifierHash,\n        uint256[8] calldata proof\n    ) external {\n        // require(usersPaid[msg.sender],\"user hasnt paid yet\");\n        _verifyPoP(_caller,root,nullifierHash,proof);\n        UserInfoURI[msg.sender] = infoURI;\n\n        //uncomment this\n        // membership.provide(msg.sender);\n        \n        emit NewMember(msg.sender, membership.currentPriceEth());\n    }\n\n    function joinWithEth(\n        string calldata infoURI,\n        address _caller,\n        uint256 root,\n        uint256 nullifierHash,\n        uint256[8] calldata proof\n    ) external payable {\n        // require(msg.value >= membership.currentPriceEth(),\"Not enough funds\");\n        _verifyPoP(_caller,root,nullifierHash,proof);\n        UserInfoURI[msg.sender] = infoURI;\n        membership.provide(msg.sender);\n        emit NewMember(msg.sender, msg.value);\n    }\n\n    // function testWorldCoin(\n    //     address caller,\n    //     uint256 root,\n    //     uint256 nullifierHash,\n    //     uint256[8] calldata proof\n    // ) external {\n\n    //     if (nullifierHashes[nullifierHash]) revert InvalidNullifier();\n    //     worldId.verifyProof(\n    //         root,\n    //         groupId,\n    //         abi.encodePacked(caller).hashToField(),\n    //         nullifierHash,\n    //         abi.encodePacked(action_id).hashToField(),\n    //         proof\n    //     );\n\n    //     // finally, we record they've done this, so they can't do it again (proof of uniqueness)\n    //     nullifierHashes[nullifierHash] = true;\n\n    // }\n\n    /**\n    ** @dev worldcoin verification\n    **/\n\n    function _verifyPoP(\n        address caller,\n        uint256 root,\n        uint256 nullifierHash,\n        uint256[8] calldata proof\n    ) internal {\n\n        //uncomment this\n        // if (nullifierHashes[nullifierHash]) revert InvalidNullifier();\n        worldId.verifyProof(\n            root,\n            groupId,\n            abi.encodePacked(caller).hashToField(),\n            nullifierHash,\n            abi.encodePacked(action_id).hashToField(),\n            proof\n        );\n\n        // finally, we record they've done this, so they can't do it again (proof of uniqueness)\n        nullifierHashes[nullifierHash] = true;\n\n    }\n\n    function setMods(address[] calldata _newMods) external onlyOwner {\n        uint256 len = _newMods.length;\n        uint256 prev_len = mods.length;\n        address[] memory temp = new address[](len);\n\n        require(len <= modLimit, \"max number of mods is 5\");\n\n        for(uint256 i=0;i<prev_len;i++){\n            isMod[mods[i]] = false;\n        }\n        for(uint256 i=0;i<len;i++){\n            temp[i] = (_newMods[i]);\n            isMod[_newMods[i]] = true;\n        }\n        mods = temp;\n\n        emit ModsUpdated(temp);\n\n    }\n    function setMembershipPrice(uint256 _newPrice) external  onlyModOrOwner {\n        membership.setPriceEth(_newPrice);\n        emit MembershipPriceUpdated(_newPrice);\n    }\n\n    function getMods() external view returns (address[] memory){\n        return mods;\n    }\n    function isMember(address _user) external view returns (bool){\n        return (membership.balanceOf(_user) > uint256(0)\n                || super.owner() == _user\n                || isMod[_user]);\n    }\n}"
    },
    "contracts/helpers/ByteHasher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary ByteHasher {\n    /// @dev Creates a keccak256 hash of a bytestring.\n    /// @param value The bytestring to hash\n    /// @return The hash of the specified value\n    /// @dev `>> 8` makes sure that the result is included in our field\n    function hashToField(bytes memory value) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\n    }\n}"
    },
    "contracts/Interfaces/IWorldId.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IWorldID {\n    /// @notice Reverts if the zero-knowledge proof is invalid.\n    /// @param root The of the Merkle tree\n    /// @param groupId The id of the Semaphore group\n    /// @param signalHash A keccak256 hash of the Semaphore signal\n    /// @param nullifierHash The nullifier hash\n    /// @param externalNullifierHash A keccak256 hash of the external nullifier\n    /// @param proof The zero-knowledge proof\n    /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\n    function verifyProof(\n        uint256 root,\n        uint256 groupId,\n        uint256 signalHash,\n        uint256 nullifierHash,\n        uint256 externalNullifierHash,\n        uint256[8] calldata proof\n    ) external view;\n}"
    },
    "contracts/Interfaces/ILepakMembership.sol": {
      "content": "pragma solidity ^0.8.0;\n\ninterface ILepakMembership {\n    function provide(address _user) external;\n    function revoke(address _user) external;\n    function tokenURI(uint256 tokenId) external view;\n    function setPriceEth(uint256 _newPrice) external;\n    function updateThresholds(uint256[3] memory _newThresholds) external;\n    function currentPriceEth() external view returns (uint256);\n    function balanceOf(address _user) external view returns (uint256);\n}"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}