{
  "address": "0x03248aef05f131871d98D0DDB0B63d87F624E86e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EthPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_tellorAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethQueryId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentEthPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        }
      ],
      "name": "getCurrentValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_ifRetrieve",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_value",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_timestampRetrieved",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getDataBefore",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_ifRetrieve",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_value",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_timestampRetrieved",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getIndexForDataBefore",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_found",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        }
      ],
      "name": "getNewValueCountbyQueryId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTimestampbyQueryIdandIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "isInDispute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "retrieveData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tellor",
      "outputs": [
        {
          "internalType": "contract ITellor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3da036b2b8cc89b85688eb476b639b91b2e60d79301b02f57ec83959aff978e",
  "receipt": {
    "to": null,
    "from": "0x4bdB8234AD81F26985d257F36a2d2d8c30365546",
    "contractAddress": "0x03248aef05f131871d98D0DDB0B63d87F624E86e",
    "transactionIndex": 28,
    "gasUsed": "1486686",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000004000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000004000000000080000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001800000000000000000000000000000100040000000000000000000000000000000000000000000000000000000000010000000100000",
    "blockHash": "0x1225d2d1ce1b7cca001fb41f96c19ea2479aadfe86cc029b47c0c4b12a9118cb",
    "transactionHash": "0xe3da036b2b8cc89b85688eb476b639b91b2e60d79301b02f57ec83959aff978e",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 28287125,
        "transactionHash": "0xe3da036b2b8cc89b85688eb476b639b91b2e60d79301b02f57ec83959aff978e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004bdb8234ad81f26985d257f36a2d2d8c30365546",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000013c0fa46ec8f320000000000000000000000000000000000000000000000001181d2673a2dca900000000000000000000000000000000000000000000025a308374c0493c5d430000000000000000000000000000000000000000000000000116e116cf3413b5e0000000000000000000000000000000000000000000025a3084b0cfedab26362",
        "logIndex": 152,
        "blockHash": "0x1225d2d1ce1b7cca001fb41f96c19ea2479aadfe86cc029b47c0c4b12a9118cb"
      }
    ],
    "blockNumber": 28287125,
    "cumulativeGasUsed": "8666200",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "880dc658b94210e91ab91f0e024f8e6e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tellorAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethQueryId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getCurrentValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_ifRetrieve\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getDataBefore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_ifRetrieve\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getIndexForDataBefore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_found\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getNewValueCountbyQueryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyQueryIdandIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"isInDispute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tellor\",\"outputs\":[{\"internalType\":\"contract ITellor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getCurrentValue(bytes32)\":{\"details\":\"Allows the user to get the latest value for the queryId specified\",\"params\":{\"_queryId\":\"is the id to look up the value for\"},\"returns\":{\"_ifRetrieve\":\"bool true if non-zero value successfully retrieved\",\"_timestampRetrieved\":\"the retrieved value's timestamp\",\"_value\":\"the value retrieved\"}},\"getDataBefore(bytes32,uint256)\":{\"details\":\"Retrieves the latest value for the queryId before the specified timestamp\",\"params\":{\"_queryId\":\"is the queryId to look up the value for\",\"_timestamp\":\"before which to search for latest value\"},\"returns\":{\"_ifRetrieve\":\"bool true if able to retrieve a non-zero value\",\"_timestampRetrieved\":\"the value's timestamp\",\"_value\":\"the value retrieved\"}},\"getIndexForDataBefore(bytes32,uint256)\":{\"details\":\"Retrieves latest array index of data before the specified timestamp for the queryId\",\"params\":{\"_queryId\":\"is the queryId to look up the index for\",\"_timestamp\":\"is the timestamp before which to search for the latest index\"},\"returns\":{\"_found\":\"whether the index was found\",\"_index\":\"the latest index found before the specified timestamp\"}},\"getNewValueCountbyQueryId(bytes32)\":{\"details\":\"Counts the number of values that have been submitted for the queryId\",\"params\":{\"_queryId\":\"the id to look up\"},\"returns\":{\"_0\":\"uint256 count of the number of values received for the queryId\"}},\"isInDispute(bytes32,uint256)\":{\"details\":\"Determines whether a value with a given queryId and timestamp has been disputed\",\"params\":{\"_queryId\":\"is the value id to look up\",\"_timestamp\":\"is the timestamp of the value to look up\"},\"returns\":{\"_0\":\"bool true if queryId/timestamp is under dispute\"}},\"retrieveData(bytes32,uint256)\":{\"details\":\"Retrieve value from oracle based on queryId/timestamp\",\"params\":{\"_queryId\":\"being requested\",\"_timestamp\":\"to retrieve data/value from\"},\"returns\":{\"_0\":\"bytes value for query/timestamp submitted\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EthOracle.sol\":\"EthTellorOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/EthOracle.sol\":{\"content\":\"import \\\"usingtellor/contracts/UsingTellor.sol\\\";\\n\\ncontract EthTellorOracle is UsingTellor {\\n\\n  uint256 public EthPrice;\\n  bytes32 public ethQueryId = 0x40aa71e5205fdc7bdb7d65f7ae41daca3820c5d3a8f62357a99eda3aa27244a3; // for matic in mumbai\\n  address payable public _tellorAddress = payable(0x840c23e39F9D029fFa888F47069aA6864f0401D7); // Mumbai\\n  constructor() UsingTellor(_tellorAddress) {}\\n\\n  function getCurrentEthPrice() external view returns (uint256 value){\\n      (bool _ifRetrieve, bytes memory _value, ) = getDataBefore(ethQueryId, block.timestamp - 2 hours);\\n      if(_ifRetrieve) {\\n          assembly {\\n            value := mload(add(_value, 0x20))\\n        }\\n      }\\n  }\\n}\",\"keccak256\":\"0x3c2ea2777c5c1aab56aac600815e5636ac4a80d6add8cf1af255e49c2f67b37c\"},\"usingtellor/contracts/UsingTellor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./interface/ITellor.sol\\\";\\n\\n/**\\n * @title UserContract\\n * This contract allows for easy integration with the Tellor System\\n * by helping smart contracts to read data from Tellor\\n */\\ncontract UsingTellor {\\n    ITellor public tellor;\\n\\n    /*Constructor*/\\n    /**\\n     * @dev the constructor sets the tellor address in storage\\n     * @param _tellor is the TellorMaster address\\n     */\\n    constructor(address payable _tellor) {\\n        tellor = ITellor(_tellor);\\n    }\\n\\n    /*Getters*/\\n    /**\\n     * @dev Allows the user to get the latest value for the queryId specified\\n     * @param _queryId is the id to look up the value for\\n     * @return _ifRetrieve bool true if non-zero value successfully retrieved\\n     * @return _value the value retrieved\\n     * @return _timestampRetrieved the retrieved value's timestamp\\n     */\\n    function getCurrentValue(bytes32 _queryId)\\n        public\\n        view\\n        returns (\\n            bool _ifRetrieve,\\n            bytes memory _value,\\n            uint256 _timestampRetrieved\\n        )\\n    {\\n        uint256 _count = getNewValueCountbyQueryId(_queryId);\\n\\n        if (_count == 0) {\\n            return (false, bytes(\\\"\\\"), 0);\\n        }\\n        uint256 _time = getTimestampbyQueryIdandIndex(_queryId, _count - 1);\\n        _value = retrieveData(_queryId, _time);\\n        if (keccak256(_value) != keccak256(bytes(\\\"\\\")))\\n            return (true, _value, _time);\\n        return (false, bytes(\\\"\\\"), _time);\\n    }\\n\\n    /**\\n     * @dev Retrieves the latest value for the queryId before the specified timestamp\\n     * @param _queryId is the queryId to look up the value for\\n     * @param _timestamp before which to search for latest value\\n     * @return _ifRetrieve bool true if able to retrieve a non-zero value\\n     * @return _value the value retrieved\\n     * @return _timestampRetrieved the value's timestamp\\n     */\\n    function getDataBefore(bytes32 _queryId, uint256 _timestamp)\\n        public\\n        view\\n        returns (\\n            bool _ifRetrieve,\\n            bytes memory _value,\\n            uint256 _timestampRetrieved\\n        )\\n    {\\n        (bool _found, uint256 _index) = getIndexForDataBefore(\\n            _queryId,\\n            _timestamp\\n        );\\n        if (!_found) return (false, bytes(\\\"\\\"), 0);\\n        uint256 _time = getTimestampbyQueryIdandIndex(_queryId, _index);\\n        _value = retrieveData(_queryId, _time);\\n        if (keccak256(_value) != keccak256(bytes(\\\"\\\")))\\n            return (true, _value, _time);\\n        return (false, bytes(\\\"\\\"), 0);\\n    }\\n\\n    /**\\n     * @dev Retrieves latest array index of data before the specified timestamp for the queryId\\n     * @param _queryId is the queryId to look up the index for\\n     * @param _timestamp is the timestamp before which to search for the latest index\\n     * @return _found whether the index was found\\n     * @return _index the latest index found before the specified timestamp\\n     */\\n    // slither-disable-next-line calls-loop\\n    function getIndexForDataBefore(bytes32 _queryId, uint256 _timestamp)\\n        public\\n        view\\n        returns (bool _found, uint256 _index)\\n    {\\n        uint256 _count = getNewValueCountbyQueryId(_queryId);\\n\\n        if (_count > 0) {\\n            uint256 middle;\\n            uint256 start = 0;\\n            uint256 end = _count - 1;\\n            uint256 _time;\\n\\n            //Checking Boundaries to short-circuit the algorithm\\n            _time = getTimestampbyQueryIdandIndex(_queryId, start);\\n            if (_time >= _timestamp) return (false, 0);\\n            _time = getTimestampbyQueryIdandIndex(_queryId, end);\\n            if (_time < _timestamp) return (true, end);\\n\\n            //Since the value is within our boundaries, do a binary search\\n            while (true) {\\n                middle = (end - start) / 2 + 1 + start;\\n                _time = getTimestampbyQueryIdandIndex(_queryId, middle);\\n                if (_time < _timestamp) {\\n                    //get immediate next value\\n                    uint256 _nextTime = getTimestampbyQueryIdandIndex(\\n                        _queryId,\\n                        middle + 1\\n                    );\\n                    if (_nextTime >= _timestamp) {\\n                        //_time is correct\\n                        return (true, middle);\\n                    } else {\\n                        //look from middle + 1(next value) to end\\n                        start = middle + 1;\\n                    }\\n                } else {\\n                    uint256 _prevTime = getTimestampbyQueryIdandIndex(\\n                        _queryId,\\n                        middle - 1\\n                    );\\n                    if (_prevTime < _timestamp) {\\n                        // _prevtime is correct\\n                        return (true, middle - 1);\\n                    } else {\\n                        //look from start to middle -1(prev value)\\n                        end = middle - 1;\\n                    }\\n                }\\n                //We couldn't find a value\\n                //if(middle - 1 == start || middle == _count) return (false, 0);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Counts the number of values that have been submitted for the queryId\\n     * @param _queryId the id to look up\\n     * @return uint256 count of the number of values received for the queryId\\n     */\\n    function getNewValueCountbyQueryId(bytes32 _queryId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        //tellorx check rinkeby/ethereum\\n        if (\\n            tellor == ITellor(0x18431fd88adF138e8b979A7246eb58EA7126ea16) ||\\n            tellor == ITellor(0xe8218cACb0a5421BC6409e498d9f8CC8869945ea)\\n        ) {\\n            return tellor.getTimestampCountById(_queryId);\\n        } else {\\n            return tellor.getNewValueCountbyQueryId(_queryId);\\n        }\\n    }\\n\\n    // /**\\n    //  * @dev Gets the timestamp for the value based on their index\\n    //  * @param _queryId is the id to look up\\n    //  * @param _index is the value index to look up\\n    //  * @return uint256 timestamp\\n    //  */\\n    function getTimestampbyQueryIdandIndex(bytes32 _queryId, uint256 _index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        //tellorx check rinkeby/ethereum\\n        if (\\n            tellor == ITellor(0x18431fd88adF138e8b979A7246eb58EA7126ea16) ||\\n            tellor == ITellor(0xe8218cACb0a5421BC6409e498d9f8CC8869945ea)\\n        ) {\\n            return tellor.getReportTimestampByIndex(_queryId, _index);\\n        } else {\\n            return tellor.getTimestampbyQueryIdandIndex(_queryId, _index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Determines whether a value with a given queryId and timestamp has been disputed\\n     * @param _queryId is the value id to look up\\n     * @param _timestamp is the timestamp of the value to look up\\n     * @return bool true if queryId/timestamp is under dispute\\n     */\\n    function isInDispute(bytes32 _queryId, uint256 _timestamp)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        ITellor _governance;\\n        //tellorx check rinkeby/ethereum\\n        if (\\n            tellor == ITellor(0x18431fd88adF138e8b979A7246eb58EA7126ea16) ||\\n            tellor == ITellor(0xe8218cACb0a5421BC6409e498d9f8CC8869945ea)\\n        ) {\\n            ITellor _newTellor = ITellor(\\n                0x88dF592F8eb5D7Bd38bFeF7dEb0fBc02cf3778a0\\n            );\\n            _governance = ITellor(\\n                _newTellor.addresses(\\n                    0xefa19baa864049f50491093580c5433e97e8d5e41f8db1a61108b4fa44cacd93\\n                )\\n            );\\n        } else {\\n            _governance = ITellor(tellor.governance());\\n        }\\n        return\\n            _governance\\n                .getVoteRounds(\\n                    keccak256(abi.encodePacked(_queryId, _timestamp))\\n                )\\n                .length > 0;\\n    }\\n\\n    /**\\n     * @dev Retrieve value from oracle based on queryId/timestamp\\n     * @param _queryId being requested\\n     * @param _timestamp to retrieve data/value from\\n     * @return bytes value for query/timestamp submitted\\n     */\\n    function retrieveData(bytes32 _queryId, uint256 _timestamp)\\n        public\\n        view\\n        returns (bytes memory)\\n    {\\n        //tellorx check rinkeby/ethereum\\n        if (\\n            tellor == ITellor(0x18431fd88adF138e8b979A7246eb58EA7126ea16) ||\\n            tellor == ITellor(0xe8218cACb0a5421BC6409e498d9f8CC8869945ea)\\n        ) {\\n            return tellor.getValueByTimestamp(_queryId, _timestamp);\\n        } else {\\n            return tellor.retrieveData(_queryId, _timestamp);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x92f27d93725f4bbda8434d00f4eaceacf9b590e6a668607cf832d2490d095b9c\",\"license\":\"MIT\"},\"usingtellor/contracts/interface/ITellor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ITellor{\\n    //Controller\\n    function addresses(bytes32) external view returns(address);\\n    function uints(bytes32) external view returns(uint256);\\n    function burn(uint256 _amount) external;\\n    function changeDeity(address _newDeity) external;\\n    function changeOwner(address _newOwner) external;\\n    function changeTellorContract(address _tContract) external;\\n    function changeControllerContract(address _newController) external;\\n    function changeGovernanceContract(address _newGovernance) external;\\n    function changeOracleContract(address _newOracle) external;\\n    function changeTreasuryContract(address _newTreasury) external;\\n    function changeUint(bytes32 _target, uint256 _amount) external;\\n    function migrate() external;\\n    function mint(address _reciever, uint256 _amount) external;\\n    function init() external;\\n    function getAllDisputeVars(uint256 _disputeId) external view returns (bytes32,bool,bool,bool,address,address,address,uint256[9] memory,int256);\\n    function getDisputeIdByDisputeHash(bytes32 _hash) external view returns (uint256);\\n    function getDisputeUintVars(uint256 _disputeId, bytes32 _data) external view returns(uint256);\\n    function getLastNewValueById(uint256 _requestId) external view returns (uint256, bool);\\n    function retrieveData(uint256 _requestId, uint256 _timestamp) external view returns (uint256);\\n    function getNewValueCountbyRequestId(uint256 _requestId) external view returns (uint256);\\n    function getAddressVars(bytes32 _data) external view returns (address);\\n    function getUintVar(bytes32 _data) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function isMigrated(address _addy) external view returns (bool);\\n    function allowance(address _user, address _spender) external view  returns (uint256);\\n    function allowedToTrade(address _user, uint256 _amount) external view returns (bool);\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n    function approveAndTransferFrom(address _from, address _to, uint256 _amount) external returns(bool);\\n    function balanceOf(address _user) external view returns (uint256);\\n    function balanceOfAt(address _user, uint256 _blockNumber)external view returns (uint256);\\n    function transfer(address _to, uint256 _amount)external returns (bool success);\\n    function transferFrom(address _from,address _to,uint256 _amount) external returns (bool success) ;\\n    function depositStake() external;\\n    function requestStakingWithdraw() external;\\n    function withdrawStake() external;\\n    function changeStakingStatus(address _reporter, uint _status) external;\\n    function slashReporter(address _reporter, address _disputer) external;\\n    function getStakerInfo(address _staker) external view returns (uint256, uint256);\\n    function getTimestampbyRequestIDandIndex(uint256 _requestId, uint256 _index) external view returns (uint256);\\n    function getNewCurrentVariables()external view returns (bytes32 _c,uint256[5] memory _r,uint256 _d,uint256 _t);\\n    function getNewValueCountbyQueryId(bytes32 _queryId) external view returns(uint256);\\n    function getTimestampbyQueryIdandIndex(bytes32 _queryId, uint256 _index) external view returns(uint256);\\n    function retrieveData(bytes32 _queryId, uint256 _timestamp) external view returns(bytes memory);\\n    //Governance\\n    enum VoteResult {FAILED,PASSED,INVALID}\\n    function setApprovedFunction(bytes4 _func, bool _val) external;\\n    function beginDispute(bytes32 _queryId,uint256 _timestamp) external;\\n    function delegate(address _delegate) external;\\n    function delegateOfAt(address _user, uint256 _blockNumber) external view returns (address);\\n    function executeVote(uint256 _disputeId) external;\\n    function proposeVote(address _contract,bytes4 _function, bytes calldata _data, uint256 _timestamp) external;\\n    function tallyVotes(uint256 _disputeId) external;\\n    function governance() external view returns (address);\\n    function updateMinDisputeFee() external;\\n    function verify() external pure returns(uint);\\n    function vote(uint256 _disputeId, bool _supports, bool _invalidQuery) external;\\n    function voteFor(address[] calldata _addys,uint256 _disputeId, bool _supports, bool _invalidQuery) external;\\n    function getDelegateInfo(address _holder) external view returns(address,uint);\\n    function isFunctionApproved(bytes4 _func) external view returns(bool);\\n    function isApprovedGovernanceContract(address _contract) external returns (bool);\\n    function getVoteRounds(bytes32 _hash) external view returns(uint256[] memory);\\n    function getVoteCount() external view returns(uint256);\\n    function getVoteInfo(uint256 _disputeId) external view returns(bytes32,uint256[9] memory,bool[2] memory,VoteResult,bytes memory,bytes4,address[2] memory);\\n    function getDisputeInfo(uint256 _disputeId) external view returns(uint256,uint256,bytes memory, address);\\n    function getOpenDisputesOnId(bytes32 _queryId) external view returns(uint256);\\n    function didVote(uint256 _disputeId, address _voter) external view returns(bool);\\n    //Oracle\\n    function getReportTimestampByIndex(bytes32 _queryId, uint256 _index) external view returns(uint256);\\n    function getValueByTimestamp(bytes32 _queryId, uint256 _timestamp) external view returns(bytes memory);\\n    function getBlockNumberByTimestamp(bytes32 _queryId, uint256 _timestamp) external view returns(uint256);\\n    function getReportingLock() external view returns(uint256);\\n    function getReporterByTimestamp(bytes32 _queryId, uint256 _timestamp) external view returns(address);\\n    function reportingLock() external view returns(uint256);\\n    function removeValue(bytes32 _queryId, uint256 _timestamp) external;\\n    function getReportsSubmittedByAddress(address _reporter) external view returns(uint256);\\n    function getTipsByUser(address _user) external view returns(uint256);\\n    function tipQuery(bytes32 _queryId, uint256 _tip, bytes memory _queryData) external;\\n    function submitValue(bytes32 _queryId, bytes calldata _value, uint256 _nonce, bytes memory _queryData) external;\\n    function burnTips() external;\\n    function changeReportingLock(uint256 _newReportingLock) external;\\n    function changeTimeBasedReward(uint256 _newTimeBasedReward) external;\\n    function getReporterLastTimestamp(address _reporter) external view returns(uint256);\\n    function getTipsById(bytes32 _queryId) external view returns(uint256);\\n    function getTimeBasedReward() external view returns(uint256);\\n    function getTimestampCountById(bytes32 _queryId) external view returns(uint256);\\n    function getTimestampIndexByTimestamp(bytes32 _queryId, uint256 _timestamp) external view returns(uint256);\\n    function getCurrentReward(bytes32 _queryId) external view returns(uint256, uint256);\\n    function getCurrentValue(bytes32 _queryId) external view returns(bytes memory);\\n    function getTimeOfLastNewValue() external view returns(uint256);\\n    //Treasury\\n    function issueTreasury(uint256 _maxAmount, uint256 _rate, uint256 _duration) external;\\n    function payTreasury(address _investor,uint256 _id) external;\\n    function buyTreasury(uint256 _id,uint256 _amount) external;\\n    function getTreasuryDetails(uint256 _id) external view returns(uint256,uint256,uint256,uint256);\\n    function getTreasuryFundsByUser(address _user) external view returns(uint256);\\n    function getTreasuryAccount(uint256 _id, address _investor) external view returns(uint256,uint256,bool);\\n    function getTreasuryCount() external view returns(uint256);\\n    function getTreasuryOwners(uint256 _id) external view returns(address[] memory);\\n    function wasPaid(uint256 _id, address _investor) external view returns(bool);\\n    //Test functions\\n    function changeAddressVar(bytes32 _id, address _addy) external;\\n\\n    //parachute functions\\n    function killContract() external;\\n    function migrateFor(address _destination,uint256 _amount) external;\\n    function rescue51PercentAttack(address _tokenHolder) external;\\n    function rescueBrokenDataReporting() external;\\n    function rescueFailedUpdate() external;\\n\\n    //Tellor 360\\n    function addStakingRewards(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xa5a51f40da64e5049b95fe53a77bfcf751d87107cca29906a1c8bd35b28e9001\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040527f40aa71e5205fdc7bdb7d65f7ae41daca3820c5d3a8f62357a99eda3aa27244a360001b60025573840c23e39f9d029ffa888f47069aa6864f0401d7600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561008c57600080fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506118b1806101006000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80639125009d116100715780639125009d146101a45780639d46fd0a146101c2578063a792765f146101e0578063adf1639d14610212578063c5958af914610244578063ce5e11bf14610274576100b4565b80631959ad5b146100b957806319b18107146100d757806329449085146100f55780632cc812bc1461012657806344e87f911461014457806377b03e0d14610174575b600080fd5b6100c16102a4565b6040516100ce919061104b565b60405180910390f35b6100df6102c8565b6040516100ec919061107f565b60405180910390f35b61010f600480360381019061010a9190611110565b6102ce565b60405161011d92919061117a565b60405180910390f35b61012e610449565b60405161013b91906111a3565b60405180910390f35b61015e60048036038101906101599190611110565b61044f565b60405161016b91906111be565b60405180910390f35b61018e600480360381019061018991906111d9565b610752565b60405161019b91906111a3565b60405180910390f35b6101ac610987565b6040516101b991906111a3565b60405180910390f35b6101ca6109bd565b6040516101d79190611227565b60405180910390f35b6101fa60048036038101906101f59190611110565b6109e3565b604051610209939291906112db565b60405180910390f35b61022c600480360381019061022791906111d9565b610a95565b60405161023b939291906112db565b60405180910390f35b61025e60048036038101906102599190611110565b610b4e565b60405161026b9190611319565b60405180910390f35b61028e60048036038101906102899190611110565b610d92565b60405161029b91906111a3565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60008060006102dc85610752565b90506000811115610439576000806000905060006001846102fd919061136a565b9050600061030b8984610d92565b905087811061032557600080965096505050505050610442565b61032f8983610d92565b90508781101561034a57600182965096505050505050610442565b5b6001156104345782600160028585610363919061136a565b61036d91906113cd565b61037791906113fe565b61038191906113fe565b935061038d8985610d92565b9050878110156103df5760006103af8a6001876103aa91906113fe565b610d92565b90508881106103ca5760018597509750505050505050610442565b6001856103d791906113fe565b93505061042f565b60006103f78a6001876103f2919061136a565b610d92565b90508881101561041e576001808661040f919061136a565b97509750505050505050610442565b60018561042b919061136a565b9250505b61034b565b505050505b60008092509250505b9250929050565b60015481565b6000807318431fd88adf138e8b979a7246eb58ea7126ea1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061051f575073e8218cacb0a5421bc6409e498d9f8cc8869945ea73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156105ee5760007388df592f8eb5d7bd38bfef7deb0fbc02cf3778a090508073ffffffffffffffffffffffffffffffffffffffff1663699f200f7fefa19baa864049f50491093580c5433e97e8d5e41f8db1a61108b4fa44cacd936040518263ffffffff1660e01b8152600401610596919061149c565b60206040518083038186803b1580156105ae57600080fd5b505afa1580156105c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e691906114f5565b91505061068f565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561065457600080fd5b505afa158015610668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068c91906114f5565b90505b60008173ffffffffffffffffffffffffffffffffffffffff1663248638e586866040516020016106c0929190611564565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016106f2919061107f565b60006040518083038186803b15801561070a57600080fd5b505afa15801561071e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061074791906116ed565b511191505092915050565b60007318431fd88adf138e8b979a7246eb58ea7126ea1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610821575073e8218cacb0a5421bc6409e498d9f8cc8869945ea73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156108d65760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166335e72432836040518263ffffffff1660e01b815260040161087f919061107f565b60206040518083038186803b15801561089757600080fd5b505afa1580156108ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cf9190611736565b9050610982565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377b03e0d836040518263ffffffff1660e01b815260040161092f919061107f565b60206040518083038186803b15801561094757600080fd5b505afa15801561095b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097f9190611736565b90505b919050565b60008060006109a5600254611c20426109a0919061136a565b6109e3565b509150915081156109b857602081015192505b505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606060008060006109f687876102ce565b9150915081610a205760006040518060200160405280600081525060009450945094505050610a8e565b6000610a2c8883610d92565b9050610a388882610b4e565b94506040518060200160405280600081525080519060200120858051906020012014610a705760018582955095509550505050610a8e565b60006040518060200160405280600081525060009550955095505050505b9250925092565b60006060600080610aa585610752565b90506000811415610ad057600060405180602001604052806000815250600093509350935050610b47565b6000610ae886600184610ae3919061136a565b610d92565b9050610af48682610b4e565b93506040518060200160405280600081525080519060200120848051906020012014610b2b57600184829450945094505050610b47565b6000604051806020016040528060008152508294509450945050505b9193909250565b60607318431fd88adf138e8b979a7246eb58ea7126ea1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610c1d575073e8218cacb0a5421bc6409e498d9f8cc8869945ea73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15610cd95760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630b2d2b0d84846040518363ffffffff1660e01b8152600401610c7d929190611763565b60006040518083038186803b158015610c9557600080fd5b505afa158015610ca9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cd29190611832565b9050610d8c565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5958af984846040518363ffffffff1660e01b8152600401610d34929190611763565b60006040518083038186803b158015610d4c57600080fd5b505afa158015610d60573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d899190611832565b90505b92915050565b60007318431fd88adf138e8b979a7246eb58ea7126ea1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610e61575073e8218cacb0a5421bc6409e498d9f8cc8869945ea73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15610f185760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637c37b8b484846040518363ffffffff1660e01b8152600401610ec1929190611763565b60206040518083038186803b158015610ed957600080fd5b505afa158015610eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f119190611736565b9050610fc6565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce5e11bf84846040518363ffffffff1660e01b8152600401610f73929190611763565b60206040518083038186803b158015610f8b57600080fd5b505afa158015610f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc39190611736565b90505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061101161100c61100784610fcc565b610fec565b610fcc565b9050919050565b600061102382610ff6565b9050919050565b600061103582611018565b9050919050565b6110458161102a565b82525050565b6000602082019050611060600083018461103c565b92915050565b6000819050919050565b61107981611066565b82525050565b60006020820190506110946000830184611070565b92915050565b6000604051905090565b600080fd5b600080fd5b6110b781611066565b81146110c257600080fd5b50565b6000813590506110d4816110ae565b92915050565b6000819050919050565b6110ed816110da565b81146110f857600080fd5b50565b60008135905061110a816110e4565b92915050565b60008060408385031215611127576111266110a4565b5b6000611135858286016110c5565b9250506020611146858286016110fb565b9150509250929050565b60008115159050919050565b61116581611150565b82525050565b611174816110da565b82525050565b600060408201905061118f600083018561115c565b61119c602083018461116b565b9392505050565b60006020820190506111b8600083018461116b565b92915050565b60006020820190506111d3600083018461115c565b92915050565b6000602082840312156111ef576111ee6110a4565b5b60006111fd848285016110c5565b91505092915050565b600061121182610fcc565b9050919050565b61122181611206565b82525050565b600060208201905061123c6000830184611218565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561127c578082015181840152602081019050611261565b8381111561128b576000848401525b50505050565b6000601f19601f8301169050919050565b60006112ad82611242565b6112b7818561124d565b93506112c781856020860161125e565b6112d081611291565b840191505092915050565b60006060820190506112f0600083018661115c565b818103602083015261130281856112a2565b9050611311604083018461116b565b949350505050565b6000602082019050818103600083015261133381846112a2565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611375826110da565b9150611380836110da565b9250828210156113935761139261133b565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113d8826110da565b91506113e3836110da565b9250826113f3576113f261139e565b5b828204905092915050565b6000611409826110da565b9150611414836110da565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114495761144861133b565b5b828201905092915050565b6000819050919050565b60008160001b9050919050565b600061148661148161147c84611454565b61145e565b611066565b9050919050565b6114968161146b565b82525050565b60006020820190506114b1600083018461148d565b92915050565b60006114c282610fcc565b9050919050565b6114d2816114b7565b81146114dd57600080fd5b50565b6000815190506114ef816114c9565b92915050565b60006020828403121561150b5761150a6110a4565b5b6000611519848285016114e0565b91505092915050565b6000819050919050565b61153d61153882611066565b611522565b82525050565b6000819050919050565b61155e611559826110da565b611543565b82525050565b6000611570828561152c565b602082019150611580828461154d565b6020820191508190509392505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115cd82611291565b810181811067ffffffffffffffff821117156115ec576115eb611595565b5b80604052505050565b60006115ff61109a565b905061160b82826115c4565b919050565b600067ffffffffffffffff82111561162b5761162a611595565b5b602082029050602081019050919050565b600080fd5b600081519050611650816110e4565b92915050565b600061166961166484611610565b6115f5565b9050808382526020820190506020840283018581111561168c5761168b61163c565b5b835b818110156116b557806116a18882611641565b84526020840193505060208101905061168e565b5050509392505050565b600082601f8301126116d4576116d3611590565b5b81516116e4848260208601611656565b91505092915050565b600060208284031215611703576117026110a4565b5b600082015167ffffffffffffffff811115611721576117206110a9565b5b61172d848285016116bf565b91505092915050565b60006020828403121561174c5761174b6110a4565b5b600061175a84828501611641565b91505092915050565b60006040820190506117786000830185611070565b611785602083018461116b565b9392505050565b600080fd5b600067ffffffffffffffff8211156117ac576117ab611595565b5b6117b582611291565b9050602081019050919050565b60006117d56117d084611791565b6115f5565b9050828152602081018484840111156117f1576117f061178c565b5b6117fc84828561125e565b509392505050565b600082601f83011261181957611818611590565b5b81516118298482602086016117c2565b91505092915050565b600060208284031215611848576118476110a4565b5b600082015167ffffffffffffffff811115611866576118656110a9565b5b61187284828501611804565b9150509291505056fea2646970667358221220dbb6f149b2c43cd3c2095c295fad25c95fa7e92e7f8c3b181a3b82967842a21d64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80639125009d116100715780639125009d146101a45780639d46fd0a146101c2578063a792765f146101e0578063adf1639d14610212578063c5958af914610244578063ce5e11bf14610274576100b4565b80631959ad5b146100b957806319b18107146100d757806329449085146100f55780632cc812bc1461012657806344e87f911461014457806377b03e0d14610174575b600080fd5b6100c16102a4565b6040516100ce919061104b565b60405180910390f35b6100df6102c8565b6040516100ec919061107f565b60405180910390f35b61010f600480360381019061010a9190611110565b6102ce565b60405161011d92919061117a565b60405180910390f35b61012e610449565b60405161013b91906111a3565b60405180910390f35b61015e60048036038101906101599190611110565b61044f565b60405161016b91906111be565b60405180910390f35b61018e600480360381019061018991906111d9565b610752565b60405161019b91906111a3565b60405180910390f35b6101ac610987565b6040516101b991906111a3565b60405180910390f35b6101ca6109bd565b6040516101d79190611227565b60405180910390f35b6101fa60048036038101906101f59190611110565b6109e3565b604051610209939291906112db565b60405180910390f35b61022c600480360381019061022791906111d9565b610a95565b60405161023b939291906112db565b60405180910390f35b61025e60048036038101906102599190611110565b610b4e565b60405161026b9190611319565b60405180910390f35b61028e60048036038101906102899190611110565b610d92565b60405161029b91906111a3565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60008060006102dc85610752565b90506000811115610439576000806000905060006001846102fd919061136a565b9050600061030b8984610d92565b905087811061032557600080965096505050505050610442565b61032f8983610d92565b90508781101561034a57600182965096505050505050610442565b5b6001156104345782600160028585610363919061136a565b61036d91906113cd565b61037791906113fe565b61038191906113fe565b935061038d8985610d92565b9050878110156103df5760006103af8a6001876103aa91906113fe565b610d92565b90508881106103ca5760018597509750505050505050610442565b6001856103d791906113fe565b93505061042f565b60006103f78a6001876103f2919061136a565b610d92565b90508881101561041e576001808661040f919061136a565b97509750505050505050610442565b60018561042b919061136a565b9250505b61034b565b505050505b60008092509250505b9250929050565b60015481565b6000807318431fd88adf138e8b979a7246eb58ea7126ea1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061051f575073e8218cacb0a5421bc6409e498d9f8cc8869945ea73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156105ee5760007388df592f8eb5d7bd38bfef7deb0fbc02cf3778a090508073ffffffffffffffffffffffffffffffffffffffff1663699f200f7fefa19baa864049f50491093580c5433e97e8d5e41f8db1a61108b4fa44cacd936040518263ffffffff1660e01b8152600401610596919061149c565b60206040518083038186803b1580156105ae57600080fd5b505afa1580156105c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e691906114f5565b91505061068f565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561065457600080fd5b505afa158015610668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068c91906114f5565b90505b60008173ffffffffffffffffffffffffffffffffffffffff1663248638e586866040516020016106c0929190611564565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016106f2919061107f565b60006040518083038186803b15801561070a57600080fd5b505afa15801561071e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061074791906116ed565b511191505092915050565b60007318431fd88adf138e8b979a7246eb58ea7126ea1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610821575073e8218cacb0a5421bc6409e498d9f8cc8869945ea73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156108d65760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166335e72432836040518263ffffffff1660e01b815260040161087f919061107f565b60206040518083038186803b15801561089757600080fd5b505afa1580156108ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cf9190611736565b9050610982565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377b03e0d836040518263ffffffff1660e01b815260040161092f919061107f565b60206040518083038186803b15801561094757600080fd5b505afa15801561095b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097f9190611736565b90505b919050565b60008060006109a5600254611c20426109a0919061136a565b6109e3565b509150915081156109b857602081015192505b505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606060008060006109f687876102ce565b9150915081610a205760006040518060200160405280600081525060009450945094505050610a8e565b6000610a2c8883610d92565b9050610a388882610b4e565b94506040518060200160405280600081525080519060200120858051906020012014610a705760018582955095509550505050610a8e565b60006040518060200160405280600081525060009550955095505050505b9250925092565b60006060600080610aa585610752565b90506000811415610ad057600060405180602001604052806000815250600093509350935050610b47565b6000610ae886600184610ae3919061136a565b610d92565b9050610af48682610b4e565b93506040518060200160405280600081525080519060200120848051906020012014610b2b57600184829450945094505050610b47565b6000604051806020016040528060008152508294509450945050505b9193909250565b60607318431fd88adf138e8b979a7246eb58ea7126ea1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610c1d575073e8218cacb0a5421bc6409e498d9f8cc8869945ea73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15610cd95760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630b2d2b0d84846040518363ffffffff1660e01b8152600401610c7d929190611763565b60006040518083038186803b158015610c9557600080fd5b505afa158015610ca9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cd29190611832565b9050610d8c565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5958af984846040518363ffffffff1660e01b8152600401610d34929190611763565b60006040518083038186803b158015610d4c57600080fd5b505afa158015610d60573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d899190611832565b90505b92915050565b60007318431fd88adf138e8b979a7246eb58ea7126ea1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610e61575073e8218cacb0a5421bc6409e498d9f8cc8869945ea73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15610f185760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637c37b8b484846040518363ffffffff1660e01b8152600401610ec1929190611763565b60206040518083038186803b158015610ed957600080fd5b505afa158015610eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f119190611736565b9050610fc6565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce5e11bf84846040518363ffffffff1660e01b8152600401610f73929190611763565b60206040518083038186803b158015610f8b57600080fd5b505afa158015610f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc39190611736565b90505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061101161100c61100784610fcc565b610fec565b610fcc565b9050919050565b600061102382610ff6565b9050919050565b600061103582611018565b9050919050565b6110458161102a565b82525050565b6000602082019050611060600083018461103c565b92915050565b6000819050919050565b61107981611066565b82525050565b60006020820190506110946000830184611070565b92915050565b6000604051905090565b600080fd5b600080fd5b6110b781611066565b81146110c257600080fd5b50565b6000813590506110d4816110ae565b92915050565b6000819050919050565b6110ed816110da565b81146110f857600080fd5b50565b60008135905061110a816110e4565b92915050565b60008060408385031215611127576111266110a4565b5b6000611135858286016110c5565b9250506020611146858286016110fb565b9150509250929050565b60008115159050919050565b61116581611150565b82525050565b611174816110da565b82525050565b600060408201905061118f600083018561115c565b61119c602083018461116b565b9392505050565b60006020820190506111b8600083018461116b565b92915050565b60006020820190506111d3600083018461115c565b92915050565b6000602082840312156111ef576111ee6110a4565b5b60006111fd848285016110c5565b91505092915050565b600061121182610fcc565b9050919050565b61122181611206565b82525050565b600060208201905061123c6000830184611218565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561127c578082015181840152602081019050611261565b8381111561128b576000848401525b50505050565b6000601f19601f8301169050919050565b60006112ad82611242565b6112b7818561124d565b93506112c781856020860161125e565b6112d081611291565b840191505092915050565b60006060820190506112f0600083018661115c565b818103602083015261130281856112a2565b9050611311604083018461116b565b949350505050565b6000602082019050818103600083015261133381846112a2565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611375826110da565b9150611380836110da565b9250828210156113935761139261133b565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113d8826110da565b91506113e3836110da565b9250826113f3576113f261139e565b5b828204905092915050565b6000611409826110da565b9150611414836110da565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114495761144861133b565b5b828201905092915050565b6000819050919050565b60008160001b9050919050565b600061148661148161147c84611454565b61145e565b611066565b9050919050565b6114968161146b565b82525050565b60006020820190506114b1600083018461148d565b92915050565b60006114c282610fcc565b9050919050565b6114d2816114b7565b81146114dd57600080fd5b50565b6000815190506114ef816114c9565b92915050565b60006020828403121561150b5761150a6110a4565b5b6000611519848285016114e0565b91505092915050565b6000819050919050565b61153d61153882611066565b611522565b82525050565b6000819050919050565b61155e611559826110da565b611543565b82525050565b6000611570828561152c565b602082019150611580828461154d565b6020820191508190509392505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115cd82611291565b810181811067ffffffffffffffff821117156115ec576115eb611595565b5b80604052505050565b60006115ff61109a565b905061160b82826115c4565b919050565b600067ffffffffffffffff82111561162b5761162a611595565b5b602082029050602081019050919050565b600080fd5b600081519050611650816110e4565b92915050565b600061166961166484611610565b6115f5565b9050808382526020820190506020840283018581111561168c5761168b61163c565b5b835b818110156116b557806116a18882611641565b84526020840193505060208101905061168e565b5050509392505050565b600082601f8301126116d4576116d3611590565b5b81516116e4848260208601611656565b91505092915050565b600060208284031215611703576117026110a4565b5b600082015167ffffffffffffffff811115611721576117206110a9565b5b61172d848285016116bf565b91505092915050565b60006020828403121561174c5761174b6110a4565b5b600061175a84828501611641565b91505092915050565b60006040820190506117786000830185611070565b611785602083018461116b565b9392505050565b600080fd5b600067ffffffffffffffff8211156117ac576117ab611595565b5b6117b582611291565b9050602081019050919050565b60006117d56117d084611791565b6115f5565b9050828152602081018484840111156117f1576117f061178c565b5b6117fc84828561125e565b509392505050565b600082601f83011261181957611818611590565b5b81516118298482602086016117c2565b91505092915050565b600060208284031215611848576118476110a4565b5b600082015167ffffffffffffffff811115611866576118656110a9565b5b61187284828501611804565b9150509291505056fea2646970667358221220dbb6f149b2c43cd3c2095c295fad25c95fa7e92e7f8c3b181a3b82967842a21d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getCurrentValue(bytes32)": {
        "details": "Allows the user to get the latest value for the queryId specified",
        "params": {
          "_queryId": "is the id to look up the value for"
        },
        "returns": {
          "_ifRetrieve": "bool true if non-zero value successfully retrieved",
          "_timestampRetrieved": "the retrieved value's timestamp",
          "_value": "the value retrieved"
        }
      },
      "getDataBefore(bytes32,uint256)": {
        "details": "Retrieves the latest value for the queryId before the specified timestamp",
        "params": {
          "_queryId": "is the queryId to look up the value for",
          "_timestamp": "before which to search for latest value"
        },
        "returns": {
          "_ifRetrieve": "bool true if able to retrieve a non-zero value",
          "_timestampRetrieved": "the value's timestamp",
          "_value": "the value retrieved"
        }
      },
      "getIndexForDataBefore(bytes32,uint256)": {
        "details": "Retrieves latest array index of data before the specified timestamp for the queryId",
        "params": {
          "_queryId": "is the queryId to look up the index for",
          "_timestamp": "is the timestamp before which to search for the latest index"
        },
        "returns": {
          "_found": "whether the index was found",
          "_index": "the latest index found before the specified timestamp"
        }
      },
      "getNewValueCountbyQueryId(bytes32)": {
        "details": "Counts the number of values that have been submitted for the queryId",
        "params": {
          "_queryId": "the id to look up"
        },
        "returns": {
          "_0": "uint256 count of the number of values received for the queryId"
        }
      },
      "isInDispute(bytes32,uint256)": {
        "details": "Determines whether a value with a given queryId and timestamp has been disputed",
        "params": {
          "_queryId": "is the value id to look up",
          "_timestamp": "is the timestamp of the value to look up"
        },
        "returns": {
          "_0": "bool true if queryId/timestamp is under dispute"
        }
      },
      "retrieveData(bytes32,uint256)": {
        "details": "Retrieve value from oracle based on queryId/timestamp",
        "params": {
          "_queryId": "being requested",
          "_timestamp": "to retrieve data/value from"
        },
        "returns": {
          "_0": "bytes value for query/timestamp submitted"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13961,
        "contract": "contracts/EthOracle.sol:EthTellorOracle",
        "label": "tellor",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITellor)15230"
      },
      {
        "astId": 3821,
        "contract": "contracts/EthOracle.sol:EthTellorOracle",
        "label": "EthPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3824,
        "contract": "contracts/EthOracle.sol:EthTellorOracle",
        "label": "ethQueryId",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 3830,
        "contract": "contracts/EthOracle.sol:EthTellorOracle",
        "label": "_tellorAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITellor)15230": {
        "encoding": "inplace",
        "label": "contract ITellor",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}