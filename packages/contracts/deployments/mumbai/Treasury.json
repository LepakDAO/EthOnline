{
  "address": "0xd75AdC20428ba93f5Aa6a668d1306Bfe4570Cf76",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_core_addr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "performInvestment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawInvestment",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "core_addr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c21d234274b2d4e782e4aad36dcacf6958e97a965b1503570b70cea112d7f00",
  "receipt": {
    "to": null,
    "from": "0x4bdB8234AD81F26985d257F36a2d2d8c30365546",
    "contractAddress": "0xd75AdC20428ba93f5Aa6a668d1306Bfe4570Cf76",
    "transactionIndex": 24,
    "gasUsed": "1864275",
    "logsBloom": "0x
    "blockHash": "0x8c11ad306fe8e194aa9316cb972a3c5f8220e0e2b5cb75cc88c3b8c6faf153b4",
    "transactionHash": "0x7c21d234274b2d4e782e4aad36dcacf6958e97a965b1503570b70cea112d7f00",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 28287133,
        "transactionHash": "0x7c21d234274b2d4e782e4aad36dcacf6958e97a965b1503570b70cea112d7f00",
        "address": "0xd75AdC20428ba93f5Aa6a668d1306Bfe4570Cf76",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004bdb8234ad81f26985d257f36a2d2d8c30365546"
        ],
        "data": "0x",
        "logIndex": 195,
        "blockHash": "0x8c11ad306fe8e194aa9316cb972a3c5f8220e0e2b5cb75cc88c3b8c6faf153b4"
      },
      {
        "transactionIndex": 24,
        "blockNumber": 28287133,
        "transactionHash": "0x7c21d234274b2d4e782e4aad36dcacf6958e97a965b1503570b70cea112d7f00",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004bdb8234ad81f26985d257f36a2d2d8c30365546",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000018c559ba004f280000000000000000000000000000000000000000000000001105a4f9397037ea0000000000000000000000000000000000000000000025a30c9b06aae5974b5600000000000000000000000000000000000000000000000010ecdf9f7f6fe8c20000000000000000000000000000000000000000000025a30cb3cc049f979a7e",
        "logIndex": 196,
        "blockHash": "0x8c11ad306fe8e194aa9316cb972a3c5f8220e0e2b5cb75cc88c3b8c6faf153b4"
      }
    ],
    "blockNumber": 28287133,
    "cumulativeGasUsed": "7481615",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x80aE7A09404634bf99f9bA5d37100DEBB36469dc"
  ],
  "numDeployments": 1,
  "solcInputHash": "880dc658b94210e91ab91f0e024f8e6e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core_addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"performInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawInvestment\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"core_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256)\":{\"details\":\"Deposit asset into Aave, msg.sender = LepakCore\",\"params\":{\"_amount\":\"Amount of asset to deposit\",\"_asset\":\"Address of asset to deposit\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"rebase()\":{\"details\":\"Deposit the entire balance of any supported asset into Aave\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeApproveAllTokens()\":{\"details\":\"Approve the spending of all assets by their corresponding aToken,      if for some reason is it necessary.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Interfaces/IAave.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for Aaves Lending Pool\\n * Documentation: https://docs.aave.com/developers/core-contracts/pool\\n */\\ninterface IAavePool {\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\\n/**\\n * @dev Interface for Aaves Lending Pool\\n * Documentation: https://docs.aave.com/developers/core-contracts/pooladdressesprovider#getpool\\n */\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @notice Get the current address for Aave LendingPool\\n     * @dev Lending pool is the core contract on which to call deposit\\n     */\\n    function getPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3e8d393ae87532f2ea18b72b6966cdd794943aaaa7387cf62ca8823294b703a4\",\"license\":\"GPL-3.0\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./Interfaces/IAave.sol\\\";\\r\\n\\r\\ninterface ILepakCore {\\r\\n    function getwhitelistedToken() external view returns (address[] memory);\\r\\n}\\r\\n\\r\\ncontract Treasury is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    uint16 constant referralCode = 0;\\r\\n    mapping(address => uint256) assetAmount;\\r\\n    //polygon mainnet\\r\\n    // address Pool = 0x794a61358D6845594F94dc1DB02A252b5b4814aD;\\r\\n    // address PoolAddressRegistry = 0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb;\\r\\n    // mumbai\\r\\n    address Pool = 0x0940ceaacBF4860d2F7BFA657121B2F26a1676B0;\\r\\n    address PoolAddressRegistry = 0x5343b5bA672Ae99d627A1C87866b8E53F47Db2E6;\\r\\n    address public core_addr;\\r\\n\\r\\n    event performInvestment(address asset, uint256 amount);\\r\\n    event withdrawInvestment(address asset, uint256 amount);\\r\\n\\r\\n    // goerli\\r\\n    // address Pool =0x18eE6714Bb1796b8172951D892Fb9f42a961C812;\\r\\n    // address PoolAddressRegistry= 0xc4dCB5126a3AfEd129BC3668Ea19285A9f56D15D;\\r\\n\\r\\n    // Transfer Ownership\\r\\n    function transferOwner(address _newOwner) external onlyOwner {\\r\\n        require(\\r\\n            msg.sender == super.owner(),\\r\\n            \\\"Only owner can transfer ownership\\\"\\r\\n        );\\r\\n        transferOwnership(_newOwner);\\r\\n    }\\r\\n\\r\\n    constructor( address _core_addr){\\r\\n        core_addr = _core_addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit the entire balance of any supported asset into Aave\\r\\n     */\\r\\n    function rebase() external onlyOwner {\\r\\n        // msg.sender = LepakCore\\r\\n        address[] memory whitelistedToken = ILepakCore(core_addr).getwhitelistedToken();\\r\\n        for (uint256 i = 0; i < whitelistedToken.length; i++) {\\r\\n            uint256 balance = IERC20(whitelistedToken[i]).balanceOf(\\r\\n                address(this)\\r\\n            );\\r\\n            if (balance > 0) {\\r\\n                _deposit(whitelistedToken[i], balance);\\r\\n                assetAmount[whitelistedToken[i]] = balance;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit asset into Aave, msg.sender = LepakCore\\r\\n     * @param _asset Address of asset to deposit\\r\\n     * @param _amount Amount of asset to deposit\\r\\n     */\\r\\n    function deposit(address _asset, uint256 _amount) external {\\r\\n        _deposit(_asset, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit asset into Aave\\r\\n     * @param _asset Address of asset to deposit\\r\\n     * @param _amount Amount of asset to deposit\\r\\n     */\\r\\n    function _deposit(address _asset, uint256 _amount) internal {\\r\\n        require(_amount > 0, \\\"Must deposit something\\\");\\r\\n        // Asset has to be approved\\r\\n        // Following line also doubles as a check that we are depositing\\r\\n        // an asset that we support.\\r\\n        //emit Deposit(_asset, _getATokenFor(_asset), _amount);\\r\\n        // V2 = deposit(), V3 = supply()\\r\\n        _getPool().supply(_asset, _amount, address(this), referralCode);\\r\\n        emit performInvestment(_asset, _amount);\\r\\n    }\\r\\n\\r\\n    // withdraw all back to Treasury contract\\r\\n    function withdrawAll() external onlyOwner {\\r\\n        // msg.sender = LepakCore\\r\\n        address[] memory whitelistedToken = ILepakCore(core_addr).getwhitelistedToken();\\r\\n        for (uint256 i = 0; i < whitelistedToken.length; i++) {\\r\\n            uint256 balance = assetAmount[whitelistedToken[i]];\\r\\n            if (balance > 0) {\\r\\n                _withdraw(address(this), whitelistedToken[i], balance);\\r\\n                assetAmount[whitelistedToken[i]] = 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // withdraw individual token\\r\\n    function withdraw(\\r\\n        address _recipient,\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        _withdraw(_recipient, _asset, _amount);\\r\\n    }\\r\\n\\r\\n    // Core logic of withdraw\\r\\n    function _withdraw(\\r\\n        address _recipient,\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        require(_amount > 0, \\\"Must withdraw something\\\");\\r\\n        require(_recipient != address(0), \\\"Must specify recipient\\\");\\r\\n\\r\\n        // emit Withdrawal(_asset, _getATokenFor(_asset), _amount);\\r\\n        uint256 withdrawAmount = _getPool().withdraw(\\r\\n            _asset,\\r\\n            _amount,\\r\\n            address(this)\\r\\n        );\\r\\n        require(withdrawAmount == _amount, \\\"Did not withdraw enough\\\");\\r\\n        emit withdrawInvestment(_asset, _amount);\\r\\n        if (_recipient != address(this)) {\\r\\n            // if not called by withdrawAll, transferback to recipient\\r\\n            IERC20(_asset).safeTransfer(_recipient, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve the spending of all assets by their corresponding aToken,\\r\\n     *      if for some reason is it necessary.\\r\\n     */\\r\\n    function safeApproveAllTokens() external {\\r\\n        address pool = address(_getPool());\\r\\n        // approve the pool to spend the Asset\\r\\n        address[] memory whitelistedToken = ILepakCore(core_addr).getwhitelistedToken();\\r\\n        for (uint256 i = 0; i < whitelistedToken.length; i++) {\\r\\n            // Safe approval\\r\\n            IERC20(whitelistedToken[i]).safeApprove(pool, 0);\\r\\n            IERC20(whitelistedToken[i]).safeApprove(pool, type(uint256).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the current address of the Aave lending pool, which is the gateway to\\r\\n     *      depositing.\\r\\n     * @return Current lending pool implementation\\r\\n     */\\r\\n    function _getPool() internal view returns (IAavePool) {\\r\\n        address lendingPool = IPoolAddressesProvider(PoolAddressRegistry)\\r\\n            .getPool();\\r\\n        require(lendingPool != address(0), \\\"Lending pool does not exist\\\");\\r\\n        return IAavePool(lendingPool);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f5abf5a329d1533e4e882bfc4fb0e490cbdb3f1ff9c6f74d4a101c9cc386919\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052730940ceaacbf4860d2f7bfa657121b2f26a1676b0600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550735343b5ba672ae99d627a1c87866b8e53f47db2e6600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550348015620000bb57600080fd5b50604051620021d2380380620021d28339818101604052810190620000e191906200027f565b62000101620000f56200014960201b60201c565b6200015160201b60201c565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620002b1565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000247826200021a565b9050919050565b62000259816200023a565b81146200026557600080fd5b50565b60008151905062000279816200024e565b92915050565b60006020828403121562000298576200029762000215565b5b6000620002a88482850162000268565b91505092915050565b611f1180620002c16000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b1461010d578063ad1728cb1461012b578063af14052c14610135578063d9caed121461013f578063f2fde38b1461015b5761009e565b806347e7ef24146100a35780634fb2e45d146100bf578063546b53cb146100db578063715018a6146100f9578063853828b614610103575b600080fd5b6100bd60048036038101906100b891906112ef565b610177565b005b6100d960048036038101906100d4919061132f565b610185565b005b6100e361020e565b6040516100f0919061136b565b60405180910390f35b610101610234565b005b61010b610248565b005b610115610409565b604051610122919061136b565b60405180910390f35b610133610432565b005b61013d6105b6565b005b61015960048036038101906101549190611386565b6107be565b005b6101756004803603810190610170919061132f565b6107d6565b005b610181828261085a565b5050565b61018d610953565b610195610409565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610202576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f99061145c565b60405180910390fd5b61020b816107d6565b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61023c610953565b61024660006109d1565b565b610250610953565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2eb1ee6040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ba57600080fd5b505afa1580156102ce573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102f791906115ea565b905060005b81518110156104055760006001600084848151811061031e5761031d611633565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111156103f1576103913084848151811061038357610382611633565b5b602002602001015183610a95565b6000600160008585815181106103aa576103a9611633565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5080806103fd90611691565b9150506102fc565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061043c610cc2565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2eb1ee6040518163ffffffff1660e01b815260040160006040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104e591906115ea565b905060005b81518110156105b15761053983600084848151811061050c5761050b611633565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610dde9092919063ffffffff16565b61059e837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84848151811061057157610570611633565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610dde9092919063ffffffff16565b80806105a990611691565b9150506104ea565b505050565b6105be610953565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2eb1ee6040518163ffffffff1660e01b815260040160006040518083038186803b15801561062857600080fd5b505afa15801561063c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061066591906115ea565b905060005b81518110156107ba57600082828151811061068857610687611633565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106c8919061136b565b60206040518083038186803b1580156106e057600080fd5b505afa1580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071891906116ef565b905060008111156107a65761074783838151811061073957610738611633565b5b60200260200101518261085a565b806001600085858151811061075f5761075e611633565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5080806107b290611691565b91505061066a565b5050565b6107c6610953565b6107d1838383610a95565b505050565b6107de610953565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561084e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108459061178e565b60405180910390fd5b610857816109d1565b50565b6000811161089d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610894906117fa565b60405180910390fd5b6108a5610cc2565b73ffffffffffffffffffffffffffffffffffffffff1663617ba03783833060006040518563ffffffff1660e01b81526004016108e49493929190611846565b600060405180830381600087803b1580156108fe57600080fd5b505af1158015610912573d6000803e3d6000fd5b505050507fbb735387328aab3af4d27518d02052e6cb659bb81f39dbfa55cd236f7ab2de01828260405161094792919061188b565b60405180910390a15050565b61095b610f3c565b73ffffffffffffffffffffffffffffffffffffffff16610979610409565b73ffffffffffffffffffffffffffffffffffffffff16146109cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c690611900565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008111610ad8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acf9061196c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3f906119d8565b60405180910390fd5b6000610b52610cc2565b73ffffffffffffffffffffffffffffffffffffffff166369328dec8484306040518463ffffffff1660e01b8152600401610b8e939291906119f8565b602060405180830381600087803b158015610ba857600080fd5b505af1158015610bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be091906116ef565b9050818114610c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1b90611a7b565b60405180910390fd5b7f105c551d902462edaf96fd42046149e1aebf267248143fb74f10ed25dec30f508383604051610c5592919061188b565b60405180910390a13073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610cbc57610cbb84838573ffffffffffffffffffffffffffffffffffffffff16610f449092919063ffffffff16565b5b50505050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2d57600080fd5b505afa158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d659190611a9b565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610dd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dce90611b14565b60405180910390fd5b8091505090565b6000811480610e77575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610e25929190611b34565b60206040518083038186803b158015610e3d57600080fd5b505afa158015610e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7591906116ef565b145b610eb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ead90611bcf565b60405180910390fd5b610f378363095ea7b360e01b8484604051602401610ed592919061188b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610fca565b505050565b600033905090565b610fc58363a9059cbb60e01b8484604051602401610f6392919061188b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610fca565b505050565b600061102c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110919092919063ffffffff16565b905060008151111561108c578080602001905181019061104c9190611c27565b61108b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108290611cc6565b60405180910390fd5b5b505050565b60606110a084846000856110a9565b90509392505050565b6060824710156110ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e590611d58565b60405180910390fd5b6110f7856111bd565b611136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112d90611dc4565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161115f9190611e5e565b60006040518083038185875af1925050503d806000811461119c576040519150601f19603f3d011682016040523d82523d6000602084013e6111a1565b606091505b50915091506111b18282866111e0565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156111f057829050611240565b6000835111156112035782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112379190611eb9565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112868261125b565b9050919050565b6112968161127b565b81146112a157600080fd5b50565b6000813590506112b38161128d565b92915050565b6000819050919050565b6112cc816112b9565b81146112d757600080fd5b50565b6000813590506112e9816112c3565b92915050565b6000806040838503121561130657611305611251565b5b6000611314858286016112a4565b9250506020611325858286016112da565b9150509250929050565b60006020828403121561134557611344611251565b5b6000611353848285016112a4565b91505092915050565b6113658161127b565b82525050565b6000602082019050611380600083018461135c565b92915050565b60008060006060848603121561139f5761139e611251565b5b60006113ad868287016112a4565b93505060206113be868287016112a4565b92505060406113cf868287016112da565b9150509250925092565b600082825260208201905092915050565b7f4f6e6c79206f776e65722063616e207472616e73666572206f776e657273686960008201527f7000000000000000000000000000000000000000000000000000000000000000602082015250565b60006114466021836113d9565b9150611451826113ea565b604082019050919050565b6000602082019050818103600083015261147581611439565b9050919050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114ca82611481565b810181811067ffffffffffffffff821117156114e9576114e8611492565b5b80604052505050565b60006114fc611247565b905061150882826114c1565b919050565b600067ffffffffffffffff82111561152857611527611492565b5b602082029050602081019050919050565b600080fd5b60008151905061154d8161128d565b92915050565b60006115666115618461150d565b6114f2565b9050808382526020820190506020840283018581111561158957611588611539565b5b835b818110156115b2578061159e888261153e565b84526020840193505060208101905061158b565b5050509392505050565b600082601f8301126115d1576115d061147c565b5b81516115e1848260208601611553565b91505092915050565b600060208284031215611600576115ff611251565b5b600082015167ffffffffffffffff81111561161e5761161d611256565b5b61162a848285016115bc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061169c826112b9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156116cf576116ce611662565b5b600182019050919050565b6000815190506116e9816112c3565b92915050565b60006020828403121561170557611704611251565b5b6000611713848285016116da565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006117786026836113d9565b91506117838261171c565b604082019050919050565b600060208201905081810360008301526117a78161176b565b9050919050565b7f4d757374206465706f73697420736f6d657468696e6700000000000000000000600082015250565b60006117e46016836113d9565b91506117ef826117ae565b602082019050919050565b60006020820190508181036000830152611813816117d7565b9050919050565b611823816112b9565b82525050565b600061ffff82169050919050565b61184081611829565b82525050565b600060808201905061185b600083018761135c565b611868602083018661181a565b611875604083018561135c565b6118826060830184611837565b95945050505050565b60006040820190506118a0600083018561135c565b6118ad602083018461181a565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006118ea6020836113d9565b91506118f5826118b4565b602082019050919050565b60006020820190508181036000830152611919816118dd565b9050919050565b7f4d75737420776974686472617720736f6d657468696e67000000000000000000600082015250565b60006119566017836113d9565b915061196182611920565b602082019050919050565b6000602082019050818103600083015261198581611949565b9050919050565b7f4d757374207370656369667920726563697069656e7400000000000000000000600082015250565b60006119c26016836113d9565b91506119cd8261198c565b602082019050919050565b600060208201905081810360008301526119f1816119b5565b9050919050565b6000606082019050611a0d600083018661135c565b611a1a602083018561181a565b611a27604083018461135c565b949350505050565b7f446964206e6f7420776974686472617720656e6f756768000000000000000000600082015250565b6000611a656017836113d9565b9150611a7082611a2f565b602082019050919050565b60006020820190508181036000830152611a9481611a58565b9050919050565b600060208284031215611ab157611ab0611251565b5b6000611abf8482850161153e565b91505092915050565b7f4c656e64696e6720706f6f6c20646f6573206e6f742065786973740000000000600082015250565b6000611afe601b836113d9565b9150611b0982611ac8565b602082019050919050565b60006020820190508181036000830152611b2d81611af1565b9050919050565b6000604082019050611b49600083018561135c565b611b56602083018461135c565b9392505050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6000611bb96036836113d9565b9150611bc482611b5d565b604082019050919050565b60006020820190508181036000830152611be881611bac565b9050919050565b60008115159050919050565b611c0481611bef565b8114611c0f57600080fd5b50565b600081519050611c2181611bfb565b92915050565b600060208284031215611c3d57611c3c611251565b5b6000611c4b84828501611c12565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611cb0602a836113d9565b9150611cbb82611c54565b604082019050919050565b60006020820190508181036000830152611cdf81611ca3565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611d426026836113d9565b9150611d4d82611ce6565b604082019050919050565b60006020820190508181036000830152611d7181611d35565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611dae601d836113d9565b9150611db982611d78565b602082019050919050565b60006020820190508181036000830152611ddd81611da1565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611e18578082015181840152602081019050611dfd565b83811115611e27576000848401525b50505050565b6000611e3882611de4565b611e428185611def565b9350611e52818560208601611dfa565b80840191505092915050565b6000611e6a8284611e2d565b915081905092915050565b600081519050919050565b6000611e8b82611e75565b611e9581856113d9565b9350611ea5818560208601611dfa565b611eae81611481565b840191505092915050565b60006020820190508181036000830152611ed38184611e80565b90509291505056fea264697066735822122016814ad2d2bb459993cb57705d51823f3be4a4d612e7d84333abe9765f17b52664736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b1461010d578063ad1728cb1461012b578063af14052c14610135578063d9caed121461013f578063f2fde38b1461015b5761009e565b806347e7ef24146100a35780634fb2e45d146100bf578063546b53cb146100db578063715018a6146100f9578063853828b614610103575b600080fd5b6100bd60048036038101906100b891906112ef565b610177565b005b6100d960048036038101906100d4919061132f565b610185565b005b6100e361020e565b6040516100f0919061136b565b60405180910390f35b610101610234565b005b61010b610248565b005b610115610409565b604051610122919061136b565b60405180910390f35b610133610432565b005b61013d6105b6565b005b61015960048036038101906101549190611386565b6107be565b005b6101756004803603810190610170919061132f565b6107d6565b005b610181828261085a565b5050565b61018d610953565b610195610409565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610202576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f99061145c565b60405180910390fd5b61020b816107d6565b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61023c610953565b61024660006109d1565b565b610250610953565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2eb1ee6040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ba57600080fd5b505afa1580156102ce573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102f791906115ea565b905060005b81518110156104055760006001600084848151811061031e5761031d611633565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111156103f1576103913084848151811061038357610382611633565b5b602002602001015183610a95565b6000600160008585815181106103aa576103a9611633565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5080806103fd90611691565b9150506102fc565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061043c610cc2565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2eb1ee6040518163ffffffff1660e01b815260040160006040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104e591906115ea565b905060005b81518110156105b15761053983600084848151811061050c5761050b611633565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610dde9092919063ffffffff16565b61059e837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84848151811061057157610570611633565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610dde9092919063ffffffff16565b80806105a990611691565b9150506104ea565b505050565b6105be610953565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2eb1ee6040518163ffffffff1660e01b815260040160006040518083038186803b15801561062857600080fd5b505afa15801561063c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061066591906115ea565b905060005b81518110156107ba57600082828151811061068857610687611633565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106c8919061136b565b60206040518083038186803b1580156106e057600080fd5b505afa1580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071891906116ef565b905060008111156107a65761074783838151811061073957610738611633565b5b60200260200101518261085a565b806001600085858151811061075f5761075e611633565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5080806107b290611691565b91505061066a565b5050565b6107c6610953565b6107d1838383610a95565b505050565b6107de610953565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561084e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108459061178e565b60405180910390fd5b610857816109d1565b50565b6000811161089d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610894906117fa565b60405180910390fd5b6108a5610cc2565b73ffffffffffffffffffffffffffffffffffffffff1663617ba03783833060006040518563ffffffff1660e01b81526004016108e49493929190611846565b600060405180830381600087803b1580156108fe57600080fd5b505af1158015610912573d6000803e3d6000fd5b505050507fbb735387328aab3af4d27518d02052e6cb659bb81f39dbfa55cd236f7ab2de01828260405161094792919061188b565b60405180910390a15050565b61095b610f3c565b73ffffffffffffffffffffffffffffffffffffffff16610979610409565b73ffffffffffffffffffffffffffffffffffffffff16146109cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c690611900565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008111610ad8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acf9061196c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3f906119d8565b60405180910390fd5b6000610b52610cc2565b73ffffffffffffffffffffffffffffffffffffffff166369328dec8484306040518463ffffffff1660e01b8152600401610b8e939291906119f8565b602060405180830381600087803b158015610ba857600080fd5b505af1158015610bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be091906116ef565b9050818114610c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1b90611a7b565b60405180910390fd5b7f105c551d902462edaf96fd42046149e1aebf267248143fb74f10ed25dec30f508383604051610c5592919061188b565b60405180910390a13073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610cbc57610cbb84838573ffffffffffffffffffffffffffffffffffffffff16610f449092919063ffffffff16565b5b50505050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2d57600080fd5b505afa158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d659190611a9b565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610dd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dce90611b14565b60405180910390fd5b8091505090565b6000811480610e77575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610e25929190611b34565b60206040518083038186803b158015610e3d57600080fd5b505afa158015610e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7591906116ef565b145b610eb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ead90611bcf565b60405180910390fd5b610f378363095ea7b360e01b8484604051602401610ed592919061188b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610fca565b505050565b600033905090565b610fc58363a9059cbb60e01b8484604051602401610f6392919061188b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610fca565b505050565b600061102c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110919092919063ffffffff16565b905060008151111561108c578080602001905181019061104c9190611c27565b61108b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108290611cc6565b60405180910390fd5b5b505050565b60606110a084846000856110a9565b90509392505050565b6060824710156110ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e590611d58565b60405180910390fd5b6110f7856111bd565b611136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112d90611dc4565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161115f9190611e5e565b60006040518083038185875af1925050503d806000811461119c576040519150601f19603f3d011682016040523d82523d6000602084013e6111a1565b606091505b50915091506111b18282866111e0565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156111f057829050611240565b6000835111156112035782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112379190611eb9565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112868261125b565b9050919050565b6112968161127b565b81146112a157600080fd5b50565b6000813590506112b38161128d565b92915050565b6000819050919050565b6112cc816112b9565b81146112d757600080fd5b50565b6000813590506112e9816112c3565b92915050565b6000806040838503121561130657611305611251565b5b6000611314858286016112a4565b9250506020611325858286016112da565b9150509250929050565b60006020828403121561134557611344611251565b5b6000611353848285016112a4565b91505092915050565b6113658161127b565b82525050565b6000602082019050611380600083018461135c565b92915050565b60008060006060848603121561139f5761139e611251565b5b60006113ad868287016112a4565b93505060206113be868287016112a4565b92505060406113cf868287016112da565b9150509250925092565b600082825260208201905092915050565b7f4f6e6c79206f776e65722063616e207472616e73666572206f776e657273686960008201527f7000000000000000000000000000000000000000000000000000000000000000602082015250565b60006114466021836113d9565b9150611451826113ea565b604082019050919050565b6000602082019050818103600083015261147581611439565b9050919050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114ca82611481565b810181811067ffffffffffffffff821117156114e9576114e8611492565b5b80604052505050565b60006114fc611247565b905061150882826114c1565b919050565b600067ffffffffffffffff82111561152857611527611492565b5b602082029050602081019050919050565b600080fd5b60008151905061154d8161128d565b92915050565b60006115666115618461150d565b6114f2565b9050808382526020820190506020840283018581111561158957611588611539565b5b835b818110156115b2578061159e888261153e565b84526020840193505060208101905061158b565b5050509392505050565b600082601f8301126115d1576115d061147c565b5b81516115e1848260208601611553565b91505092915050565b600060208284031215611600576115ff611251565b5b600082015167ffffffffffffffff81111561161e5761161d611256565b5b61162a848285016115bc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061169c826112b9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156116cf576116ce611662565b5b600182019050919050565b6000815190506116e9816112c3565b92915050565b60006020828403121561170557611704611251565b5b6000611713848285016116da565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006117786026836113d9565b91506117838261171c565b604082019050919050565b600060208201905081810360008301526117a78161176b565b9050919050565b7f4d757374206465706f73697420736f6d657468696e6700000000000000000000600082015250565b60006117e46016836113d9565b91506117ef826117ae565b602082019050919050565b60006020820190508181036000830152611813816117d7565b9050919050565b611823816112b9565b82525050565b600061ffff82169050919050565b61184081611829565b82525050565b600060808201905061185b600083018761135c565b611868602083018661181a565b611875604083018561135c565b6118826060830184611837565b95945050505050565b60006040820190506118a0600083018561135c565b6118ad602083018461181a565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006118ea6020836113d9565b91506118f5826118b4565b602082019050919050565b60006020820190508181036000830152611919816118dd565b9050919050565b7f4d75737420776974686472617720736f6d657468696e67000000000000000000600082015250565b60006119566017836113d9565b915061196182611920565b602082019050919050565b6000602082019050818103600083015261198581611949565b9050919050565b7f4d757374207370656369667920726563697069656e7400000000000000000000600082015250565b60006119c26016836113d9565b91506119cd8261198c565b602082019050919050565b600060208201905081810360008301526119f1816119b5565b9050919050565b6000606082019050611a0d600083018661135c565b611a1a602083018561181a565b611a27604083018461135c565b949350505050565b7f446964206e6f7420776974686472617720656e6f756768000000000000000000600082015250565b6000611a656017836113d9565b9150611a7082611a2f565b602082019050919050565b60006020820190508181036000830152611a9481611a58565b9050919050565b600060208284031215611ab157611ab0611251565b5b6000611abf8482850161153e565b91505092915050565b7f4c656e64696e6720706f6f6c20646f6573206e6f742065786973740000000000600082015250565b6000611afe601b836113d9565b9150611b0982611ac8565b602082019050919050565b60006020820190508181036000830152611b2d81611af1565b9050919050565b6000604082019050611b49600083018561135c565b611b56602083018461135c565b9392505050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6000611bb96036836113d9565b9150611bc482611b5d565b604082019050919050565b60006020820190508181036000830152611be881611bac565b9050919050565b60008115159050919050565b611c0481611bef565b8114611c0f57600080fd5b50565b600081519050611c2181611bfb565b92915050565b600060208284031215611c3d57611c3c611251565b5b6000611c4b84828501611c12565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611cb0602a836113d9565b9150611cbb82611c54565b604082019050919050565b60006020820190508181036000830152611cdf81611ca3565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611d426026836113d9565b9150611d4d82611ce6565b604082019050919050565b60006020820190508181036000830152611d7181611d35565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611dae601d836113d9565b9150611db982611d78565b602082019050919050565b60006020820190508181036000830152611ddd81611da1565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611e18578082015181840152602081019050611dfd565b83811115611e27576000848401525b50505050565b6000611e3882611de4565b611e428185611def565b9350611e52818560208601611dfa565b80840191505092915050565b6000611e6a8284611e2d565b915081905092915050565b600081519050919050565b6000611e8b82611e75565b611e9581856113d9565b9350611ea5818560208601611dfa565b611eae81611481565b840191505092915050565b60006020820190508181036000830152611ed38184611e80565b90509291505056fea264697066735822122016814ad2d2bb459993cb57705d51823f3be4a4d612e7d84333abe9765f17b52664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(address,uint256)": {
        "details": "Deposit asset into Aave, msg.sender = LepakCore",
        "params": {
          "_amount": "Amount of asset to deposit",
          "_asset": "Address of asset to deposit"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "rebase()": {
        "details": "Deposit the entire balance of any supported asset into Aave"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeApproveAllTokens()": {
        "details": "Approve the spending of all assets by their corresponding aToken,      if for some reason is it necessary."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5462,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "assetAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5465,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "Pool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5468,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "PoolAddressRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5470,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "core_addr",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}