{
  "address": "0x61CDB71DCD2B240F2113196d9Fa9bd1E3eF0C0E2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWorldID",
          "name": "_worldId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_membershipAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_action_id",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidNullifier",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "new_price",
          "type": "uint256"
        }
      ],
      "name": "MembershipPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "new_mods",
          "type": "address[]"
        }
      ],
      "name": "ModsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "NewMemberEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "n_members",
          "type": "uint256"
        }
      ],
      "name": "NewTeam",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "newMember",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UserInfoURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMods",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getwhitelistedToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelistedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "joinWithERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "infoURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "joinWithEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "infoURI",
          "type": "string"
        }
      ],
      "name": "joinWithoutEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "modLimit",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mods",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        }
      ],
      "name": "payForTeam",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "setMembershipPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_newMods",
          "type": "address[]"
        }
      ],
      "name": "setMods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury_addr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usersPaid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "whitelistToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x47bdfa561179ed97dc9837f6ac0e9af204c93182219212390d617e96118c2a53",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x4bdB8234AD81F26985d257F36a2d2d8c30365546",
    "contractAddress": "0x61CDB71DCD2B240F2113196d9Fa9bd1E3eF0C0E2",
    "transactionIndex": 0,
    "gasUsed": "2676337",
    "logsBloom": "0x
    "blockHash": "0xf45e4bd4150670c709f062ad65e164671a136e7757c5d2434d9f3d83a90e790a",
    "transactionHash": "0x47bdfa561179ed97dc9837f6ac0e9af204c93182219212390d617e96118c2a53",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 244989,
        "transactionHash": "0x47bdfa561179ed97dc9837f6ac0e9af204c93182219212390d617e96118c2a53",
        "address": "0x61CDB71DCD2B240F2113196d9Fa9bd1E3eF0C0E2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004bdb8234ad81f26985d257f36a2d2d8c30365546"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf45e4bd4150670c709f062ad65e164671a136e7757c5d2434d9f3d83a90e790a"
      }
    ],
    "blockNumber": 244989,
    "cumulativeGasUsed": "2676337",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xABB70f7F39035586Da57B3c8136035f87AC0d2Aa",
    "0x844791b158f1bdED6522A3f44d060F7b8269Ab96",
    "wid_staging_85f9d1b6ab3027c3d5026fbb30a41998"
  ],
  "numDeployments": 1,
  "solcInputHash": "4c5f63ba7ab2cac777c346d991fcfeab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWorldID\",\"name\":\"_worldId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_membershipAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_action_id\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidNullifier\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_price\",\"type\":\"uint256\"}],\"name\":\"MembershipPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"new_mods\",\"type\":\"address[]\"}],\"name\":\"ModsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"NewMemberEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"n_members\",\"type\":\"uint256\"}],\"name\":\"NewTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"newMember\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserInfoURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMods\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getwhitelistedToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelistedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"joinWithERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"infoURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"joinWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"infoURI\",\"type\":\"string\"}],\"name\":\"joinWithoutEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modLimit\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mods\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"payForTeam\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setMembershipPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newMods\",\"type\":\"address[]\"}],\"name\":\"setMods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersPaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"whitelistToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"joinWithERC20(address)\":{\"details\":\"function to join with any token** @note this is a dummy function, we need to modify according to number of decimals*\"},\"joinWithoutEth(string)\":{\"details\":\"DUMMY FUNCTION** @note this function is for hackathon, allows to test the integration of our contract.  uncomment first line of the function will work along with payForTeam function.*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"worldId\":{\"details\":\"worldcoin verification*\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LepakCore.sol\":\"LepakCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Interfaces/ILepakMembership.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface ILepakMembership {\\n    function provide(address _user) external;\\n    function revoke(address _user) external;\\n    function tokenURI(uint256 tokenId) external view;\\n    function setPriceEth(uint256 _newPrice) external;\\n    function updateThresholds(uint256[3] memory _newThresholds) external;\\n    function currentPriceEth() external view returns (uint256);\\n    function balanceOf(address _user) external view returns (uint256);\\n}\",\"keccak256\":\"0xb8aac81a5f22c31bce0e44271393d0592550d62fb4b5229a3fe0529738066409\"},\"contracts/Interfaces/IWorldId.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWorldID {\\n    /// @notice Reverts if the zero-knowledge proof is invalid.\\n    /// @param root The of the Merkle tree\\n    /// @param groupId The id of the Semaphore group\\n    /// @param signalHash A keccak256 hash of the Semaphore signal\\n    /// @param nullifierHash The nullifier hash\\n    /// @param externalNullifierHash A keccak256 hash of the external nullifier\\n    /// @param proof The zero-knowledge proof\\n    /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\\n    function verifyProof(\\n        uint256 root,\\n        uint256 groupId,\\n        uint256 signalHash,\\n        uint256 nullifierHash,\\n        uint256 externalNullifierHash,\\n        uint256[8] calldata proof\\n    ) external view;\\n}\",\"keccak256\":\"0x0e48b38618c0adf1de814097db7b6e99b549926948ea73214dda0539780f5fb0\",\"license\":\"MIT\"},\"contracts/LepakCore.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ByteHasher } from \\\"./helpers/ByteHasher.sol\\\";\\nimport { IWorldID } from \\\"./Interfaces/IWorldId.sol\\\";\\nimport { ILepakMembership } from \\\"./Interfaces/ILepakMembership.sol\\\";\\n\\nstruct shortProposal {\\n    address targetContract;\\n    string call;\\n}\\n\\ninterface ITestOracle {\\n\\n    /** \\n    **  @dev wrapper for oracles that we want to use in our protocol / contract still under development\\n    **  @note currently this oracle will return data that is predefined\\n        we are looking forward to integrate different oracles in our contracts to keep it safer\\n        all prices are in usd\\n    **/\\n    function priceOfETH() external view returns (uint256);\\n    function priceOfERC20(address _asset) external view returns (uint256); \\n}\\n\\ncontract LepakCore is Ownable{\\n    using ByteHasher for bytes;\\n    using SafeMath for uint256;\\n\\n    event NewMemberEth(address member,uint256 fee);\\n    event newMember(address member,address token_addr, uint256 fee);\\n    event NewTeam(uint256 n_members);\\n    event ModsUpdated(address[] new_mods);\\n    event MembershipPriceUpdated(uint256 new_price);\\n\\n    mapping(address => string) public UserInfoURI;\\n    mapping(address => bool) public usersPaid;\\n    mapping(address => bool) public isMod;\\n    mapping(address => bool) public isWhitelistedToken;\\n    uint8 public modLimit = 5;\\n    ILepakMembership membership;\\n    address[] public mods;\\n    address public oracleAddr;\\n    address public treasury_addr;\\n    address[] whitelistedToken;\\n    \\n    /**\\n    ** @dev worldcoin verification\\n    **/\\n    \\n    IWorldID internal worldId;\\n    string internal action_id;\\n    uint256 internal groupId = 1;\\n    mapping(uint256 => bool) internal nullifierHashes;\\n    error InvalidNullifier();\\n\\n    constructor(IWorldID _worldId, address _membershipAddr, string memory _action_id) {\\n        worldId = _worldId;\\n        membership = ILepakMembership(_membershipAddr);\\n        action_id = _action_id;\\n    }\\n\\n    modifier onlyMod () {\\n        require (isMod[msg.sender], \\\"caller is not a moderator\\\");\\n        _;\\n    }\\n\\n    modifier onlyModOrOwner () {\\n        require (isMod[msg.sender] || super.owner() == msg.sender, \\\"caller is not a moderator or owner\\\");\\n        _;\\n    }\\n\\n    function payForTeam(address[] calldata _members) external payable {\\n        uint256 len = _members.length;     \\n        require(msg.value >= len.mul(membership.currentPriceEth()),\\\"Not enough funds\\\");\\n        for(uint i=0;i<len;i++){\\n            usersPaid[_members[i]] = true;\\n        }\\n        emit NewTeam(len);\\n    }\\n\\n    /**\\n    ** @dev DUMMY FUNCTION\\n    ** @note this function is for hackathon, allows to test the integration of our contract. \\n        uncomment first line of the function will work along with payForTeam function.\\n    **/\\n\\n    function joinWithoutEth(\\n        string memory infoURI\\n        // address _caller,\\n        // uint256 root,\\n        // uint256 nullifierHash,\\n        // uint256[8] calldata proof\\n    ) external {\\n        // require(usersPaid[msg.sender],\\\"user hasnt paid yet\\\");\\n        // _verifyPoP(_caller,root,nullifierHash,proof);\\n        UserInfoURI[msg.sender] = infoURI;\\n        membership.provide(msg.sender);\\n        emit NewMemberEth(msg.sender, membership.currentPriceEth());\\n    }\\n\\n    function joinWithEth(\\n        string calldata infoURI,\\n        address _caller,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256[8] calldata proof\\n    ) external payable {\\n        require(msg.value >= membership.currentPriceEth(),\\\"Not enough funds\\\");\\n        _verifyPoP(_caller,root,nullifierHash,proof);\\n        UserInfoURI[msg.sender] = infoURI;\\n        membership.provide(msg.sender);\\n        emit NewMemberEth(msg.sender, msg.value);\\n    }\\n\\n    /**\\n    ** @dev function to join with any token\\n    ** @note this is a dummy function, we need to modify according to number of decimals\\n    **/\\n\\n    function joinWithERC20 (address _token) external {\\n\\n        uint256 amountToTransfer = ITestOracle(oracleAddr).priceOfETH().mul(membership.currentPriceEth());\\n        amountToTransfer = amountToTransfer.div(ITestOracle(oracleAddr).priceOfERC20(_token));\\n\\n        require(IERC20(_token).balanceOf(msg.sender)>amountToTransfer,\\\"sender doesnt have enough funds\\\");\\n        IERC20(_token).transferFrom(msg.sender, treasury_addr , amountToTransfer);\\n        emit newMember(msg.sender,_token,amountToTransfer);\\n    }\\n\\n    /**\\n    ** @dev worldcoin verification\\n    **/\\n\\n    function _verifyPoP(\\n        address caller,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256[8] calldata proof\\n    ) internal {\\n\\n        if (nullifierHashes[nullifierHash]) revert InvalidNullifier();\\n        worldId.verifyProof(\\n            root,\\n            groupId,\\n            abi.encodePacked(caller).hashToField(),\\n            nullifierHash,\\n            abi.encodePacked(action_id).hashToField(),\\n            proof\\n        );\\n\\n        // finally, we record they've done this, so they can't do it again (proof of uniqueness)\\n        nullifierHashes[nullifierHash] = true;\\n\\n    }\\n\\n    function setMods(address[] calldata _newMods) external onlyOwner {\\n        uint256 len = _newMods.length;\\n        uint256 prev_len = mods.length;\\n        address[] memory temp = new address[](len);\\n\\n        require(len <= modLimit, \\\"max number of mods is 5\\\");\\n\\n        for(uint256 i=0;i<prev_len;i++){\\n            isMod[mods[i]] = false;\\n        }\\n        for(uint256 i=0;i<len;i++){\\n            temp[i] = (_newMods[i]);\\n            isMod[_newMods[i]] = true;\\n        }\\n        mods = temp;\\n\\n        emit ModsUpdated(temp);\\n\\n    }\\n    function whitelistToken(address _token) external onlyOwner {\\n        isWhitelistedToken[_token] = true;\\n        whitelistedToken.push(_token);\\n    }\\n    function getwhitelistedToken() external view returns (address[] memory) {\\n        return whitelistedToken;\\n    }\\n    function setOracle(address _newOracle) external onlyOwner {\\n        oracleAddr = _newOracle;\\n    }\\n    function setTreasury(address _newTreasury) external onlyOwner {\\n        treasury_addr = _newTreasury;\\n    }\\n    function setMembershipPrice(uint256 _newPrice) external  onlyModOrOwner {\\n        membership.setPriceEth(_newPrice);\\n        emit MembershipPriceUpdated(_newPrice);\\n    }\\n\\n    function getMods() external view returns (address[] memory){\\n        return mods;\\n    }\\n    function isMember(address _user) external view returns (bool){\\n        return (membership.balanceOf(_user) > uint256(0)\\n                || super.owner() == _user\\n                || isMod[_user]);\\n    }\\n}\",\"keccak256\":\"0x86f10ab5444d654ac9f25639c27db66788cf6c51a196cabfdc0c045d120c3ec1\"},\"contracts/helpers/ByteHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary ByteHasher {\\n    /// @dev Creates a keccak256 hash of a bytestring.\\n    /// @param value The bytestring to hash\\n    /// @return The hash of the specified value\\n    /// @dev `>> 8` makes sure that the result is included in our field\\n    function hashToField(bytes memory value) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\\n    }\\n}\",\"keccak256\":\"0xdf7abea628f202e09d500fd6e1d27c6e900a088f2a79ae4870463d13fc888d65\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260058060006101000a81548160ff021916908360ff1602179055506001600c553480156200003157600080fd5b506040516200322c3803806200322c8339818101604052810190620000579190620004de565b620000776200006b6200011b60201b60201c565b6200012360201b60201c565b82600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600b908051906020019062000111929190620001e7565b50505050620005be565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001f59062000588565b90600052602060002090601f01602090048101928262000219576000855562000265565b82601f106200023457805160ff191683800117855562000265565b8280016001018555821562000265579182015b828111156200026457825182559160200191906001019062000247565b5b50905062000274919062000278565b5090565b5b808211156200029357600081600090555060010162000279565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002d882620002ab565b9050919050565b6000620002ec82620002cb565b9050919050565b620002fe81620002df565b81146200030a57600080fd5b50565b6000815190506200031e81620002f3565b92915050565b6200032f81620002cb565b81146200033b57600080fd5b50565b6000815190506200034f8162000324565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003aa826200035f565b810181811067ffffffffffffffff82111715620003cc57620003cb62000370565b5b80604052505050565b6000620003e162000297565b9050620003ef82826200039f565b919050565b600067ffffffffffffffff82111562000412576200041162000370565b5b6200041d826200035f565b9050602081019050919050565b60005b838110156200044a5780820151818401526020810190506200042d565b838111156200045a576000848401525b50505050565b6000620004776200047184620003f4565b620003d5565b9050828152602081018484840111156200049657620004956200035a565b5b620004a38482856200042a565b509392505050565b600082601f830112620004c357620004c262000355565b5b8151620004d584826020860162000460565b91505092915050565b600080600060608486031215620004fa57620004f9620002a1565b5b60006200050a868287016200030d565b93505060206200051d868287016200033e565b925050604084015167ffffffffffffffff811115620005415762000540620002a6565b5b6200054f86828701620004ab565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620005a157607f821691505b60208210811415620005b857620005b762000559565b5b50919050565b612c5e80620005ce6000396000f3fe6080604052600436106101405760003560e01c80637e4e61d7116100b6578063ab37f4861161006f578063ab37f4861461042c578063c00af42c14610469578063e07540e4146104a6578063f0f44260146104cf578063f2fde38b146104f8578063fb2eb1ee1461052157610140565b80637e4e61d714610317578063846d0bb91461034257806384fc28e41461035e5780638988b284146103875780638da5cb5b146103c4578063a230c524146103ef57610140565b80635dcce7ed116101085780635dcce7ed1461022c5780636247f6f21461024857806366b9b5631461027157806369d5f38a146102ae578063715018a6146102d75780637adbf973146102ee57610140565b80633b33ac321461014557806348b49cbf146101705780634d078f481461019b5780634e1b8e4a146101c657806354e68454146101ef575b600080fd5b34801561015157600080fd5b5061015a61054c565b6040516101679190611f01565b60405180910390f35b34801561017c57600080fd5b506101856105da565b6040516101929190611f32565b60405180910390f35b3480156101a757600080fd5b506101b0610600565b6040516101bd9190611f69565b60405180910390f35b3480156101d257600080fd5b506101ed60048036038101906101e891906120de565b610613565b005b3480156101fb57600080fd5b5061021660048036038101906102119190612153565b6107cf565b604051610223919061219b565b60405180910390f35b61024660048036038101906102419190612216565b6107ef565b005b34801561025457600080fd5b5061026f600480360381019061026a9190612153565b6109c5565b005b34801561027d57600080fd5b5061029860048036038101906102939190612153565b610a8b565b6040516102a591906122eb565b60405180910390f35b3480156102ba57600080fd5b506102d560048036038101906102d09190612343565b610b2b565b005b3480156102e357600080fd5b506102ec610cbb565b005b3480156102fa57600080fd5b5061031560048036038101906103109190612153565b610ccf565b005b34801561032357600080fd5b5061032c610d1b565b6040516103399190611f32565b60405180910390f35b61035c600480360381019061035791906123e8565b610d41565b005b34801561036a57600080fd5b5061038560048036038101906103809190612153565b610f4c565b005b34801561039357600080fd5b506103ae60048036038101906103a99190612153565b61131b565b6040516103bb919061219b565b60405180910390f35b3480156103d057600080fd5b506103d961133b565b6040516103e69190611f32565b60405180910390f35b3480156103fb57600080fd5b5061041660048036038101906104119190612153565b611364565b604051610423919061219b565b60405180910390f35b34801561043857600080fd5b50610453600480360381019061044e9190612153565b6114ab565b604051610460919061219b565b60405180910390f35b34801561047557600080fd5b50610490600480360381019061048b9190612343565b6114cb565b60405161049d9190611f32565b60405180910390f35b3480156104b257600080fd5b506104cd60048036038101906104c89190612216565b61150a565b005b3480156104db57600080fd5b506104f660048036038101906104f19190612153565b6117e3565b005b34801561050457600080fd5b5061051f600480360381019061051a9190612153565b61182f565b005b34801561052d57600080fd5b506105366118b3565b6040516105439190611f01565b60405180910390f35b606060068054806020026020016040519081016040528092919081815260200182805480156105d057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610586575b5050505050905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900460ff1681565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190610666929190611c5e565b50600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631803aa33336040518263ffffffff1660e01b81526004016106c29190611f32565b600060405180830381600087803b1580156106dc57600080fd5b505af11580156106f0573d6000803e3d6000fd5b505050507f8d4d6f2f21dc1bb70970c184fb4ec2a9c346592fa565b810bb14bd791d65b1d333600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e413e2bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561077e57600080fd5b505afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190612498565b6040516107c49291906124d4565b60405180910390a150565b60026020528060005260406000206000915054906101000a900460ff1681565b60008282905090506108a9600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e413e2bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561086257600080fd5b505afa158015610876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089a9190612498565b8261194190919063ffffffff16565b3410156108eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e290612549565b60405180910390fd5b60005b818110156109885760016002600086868581811061090f5761090e612569565b5b90506020020160208101906109249190612153565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610980906125c7565b9150506108ee565b507fa90ad43b37352ebc1e46954a3f2d064584b9afe4c9dbb1f88d191260e12a410e816040516109b89190612610565b60405180910390a1505050565b6109cd611957565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506009819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60016020528060005260406000206000915090508054610aaa9061265a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad69061265a565b8015610b235780601f10610af857610100808354040283529160200191610b23565b820191906000526020600020905b815481529060010190602001808311610b0657829003601f168201915b505050505081565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680610bb557503373ffffffffffffffffffffffffffffffffffffffff16610b9d61133b565b73ffffffffffffffffffffffffffffffffffffffff16145b610bf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610beb906126fe565b60405180910390fd5b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630249d624826040518263ffffffff1660e01b8152600401610c4f9190612610565b600060405180830381600087803b158015610c6957600080fd5b505af1158015610c7d573d6000803e3d6000fd5b505050507fe3b51bfc59d6e44e4da024e028d277b0284e6695cce36d919aea83e2c7de284381604051610cb09190612610565b60405180910390a150565b610cc3611957565b610ccd60006119d5565b565b610cd7611957565b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e413e2bc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610da957600080fd5b505afa158015610dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de19190612498565b341015610e23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1a90612549565b60405180910390fd5b610e2f84848484611a99565b8585600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209190610e7d929190611ce4565b50600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631803aa33336040518263ffffffff1660e01b8152600401610ed99190611f32565b600060405180830381600087803b158015610ef357600080fd5b505af1158015610f07573d6000803e3d6000fd5b505050507f8d4d6f2f21dc1bb70970c184fb4ec2a9c346592fa565b810bb14bd791d65b1d33334604051610f3c9291906124d4565b60405180910390a1505050505050565b600061109f600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e413e2bc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fb957600080fd5b505afa158015610fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff19190612498565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663858b033d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561105957600080fd5b505afa15801561106d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110919190612498565b61194190919063ffffffff16565b905061115e600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8e5573b846040518263ffffffff1660e01b81526004016110ff9190611f32565b60206040518083038186803b15801561111757600080fd5b505afa15801561112b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114f9190612498565b82611c0990919063ffffffff16565b9050808273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161119a9190611f32565b60206040518083038186803b1580156111b257600080fd5b505afa1580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea9190612498565b1161122a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112219061276a565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd33600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b81526004016112899392919061278a565b602060405180830381600087803b1580156112a357600080fd5b505af11580156112b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112db91906127ed565b507fe0bf1c581d8916d934fab2546c88910c470fa1e61d274e90b48df83d7f60c01033838360405161130f9392919061278a565b60405180910390a15050565b60036020528060005260406000206000915054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016113c29190611f32565b60206040518083038186803b1580156113da57600080fd5b505afa1580156113ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114129190612498565b118061145057508173ffffffffffffffffffffffffffffffffffffffff1661143861133b565b73ffffffffffffffffffffffffffffffffffffffff16145b806114a45750600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b9050919050565b60046020528060005260406000206000915054906101000a900460ff1681565b600681815481106114db57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611512611957565b60008282905090506000600680549050905060008267ffffffffffffffff8111156115405761153f611fb3565b5b60405190808252806020026020018201604052801561156e5781602001602082028036833780820191505090505b509050600560009054906101000a900460ff1660ff168311156115c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bd90612866565b60405180910390fd5b60005b8281101561167a57600060036000600684815481106115eb576115ea612569565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611672906125c7565b9150506115c9565b5060005b8381101561178d5785858281811061169957611698612569565b5b90506020020160208101906116ae9190612153565b8282815181106116c1576116c0612569565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060016003600088888581811061171457611713612569565b5b90506020020160208101906117299190612153565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611785906125c7565b91505061167e565b5080600690805190602001906117a4929190611d6a565b507f271382085bd3790c7702e021ba0fc6d8369de53f765d04ffcd8fd3c75cde0fea816040516117d49190611f01565b60405180910390a15050505050565b6117eb611957565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611837611957565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189e906128f8565b60405180910390fd5b6118b0816119d5565b50565b6060600980548060200260200160405190810160405280929190818152602001828054801561193757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116118ed575b5050505050905090565b6000818361194f9190612918565b905092915050565b61195f611c1f565b73ffffffffffffffffffffffffffffffffffffffff1661197d61133b565b73ffffffffffffffffffffffffffffffffffffffff16146119d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ca906129be565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600d600083815260200190815260200160002060009054906101000a900460ff1615611af1576040517f5d904cb200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633bc778e384600c54611b5b88604051602001611b479190612a26565b604051602081830303815290604052611c27565b86611b85600b604051602001611b719190612ae0565b604051602081830303815290604052611c27565b876040518763ffffffff1660e01b8152600401611ba796959493929190612b08565b60006040518083038186803b158015611bbf57600080fd5b505afa158015611bd3573d6000803e3d6000fd5b505050506001600d600084815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b60008183611c179190612b99565b905092915050565b600033905090565b6000600882604051602001611c3c9190612c11565b6040516020818303038152906040528051906020012060001c901c9050919050565b828054611c6a9061265a565b90600052602060002090601f016020900481019282611c8c5760008555611cd3565b82601f10611ca557805160ff1916838001178555611cd3565b82800160010185558215611cd3579182015b82811115611cd2578251825591602001919060010190611cb7565b5b509050611ce09190611df4565b5090565b828054611cf09061265a565b90600052602060002090601f016020900481019282611d125760008555611d59565b82601f10611d2b57803560ff1916838001178555611d59565b82800160010185558215611d59579182015b82811115611d58578235825591602001919060010190611d3d565b5b509050611d669190611df4565b5090565b828054828255906000526020600020908101928215611de3579160200282015b82811115611de25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611d8a565b5b509050611df09190611df4565b5090565b5b80821115611e0d576000816000905550600101611df5565b5090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e6882611e3d565b9050919050565b611e7881611e5d565b82525050565b6000611e8a8383611e6f565b60208301905092915050565b6000602082019050919050565b6000611eae82611e11565b611eb88185611e1c565b9350611ec383611e2d565b8060005b83811015611ef4578151611edb8882611e7e565b9750611ee683611e96565b925050600181019050611ec7565b5085935050505092915050565b60006020820190508181036000830152611f1b8184611ea3565b905092915050565b611f2c81611e5d565b82525050565b6000602082019050611f476000830184611f23565b92915050565b600060ff82169050919050565b611f6381611f4d565b82525050565b6000602082019050611f7e6000830184611f5a565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611feb82611fa2565b810181811067ffffffffffffffff8211171561200a57612009611fb3565b5b80604052505050565b600061201d611f84565b90506120298282611fe2565b919050565b600067ffffffffffffffff82111561204957612048611fb3565b5b61205282611fa2565b9050602081019050919050565b82818337600083830152505050565b600061208161207c8461202e565b612013565b90508281526020810184848401111561209d5761209c611f9d565b5b6120a884828561205f565b509392505050565b600082601f8301126120c5576120c4611f98565b5b81356120d584826020860161206e565b91505092915050565b6000602082840312156120f4576120f3611f8e565b5b600082013567ffffffffffffffff81111561211257612111611f93565b5b61211e848285016120b0565b91505092915050565b61213081611e5d565b811461213b57600080fd5b50565b60008135905061214d81612127565b92915050565b60006020828403121561216957612168611f8e565b5b60006121778482850161213e565b91505092915050565b60008115159050919050565b61219581612180565b82525050565b60006020820190506121b0600083018461218c565b92915050565b600080fd5b600080fd5b60008083601f8401126121d6576121d5611f98565b5b8235905067ffffffffffffffff8111156121f3576121f26121b6565b5b60208301915083602082028301111561220f5761220e6121bb565b5b9250929050565b6000806020838503121561222d5761222c611f8e565b5b600083013567ffffffffffffffff81111561224b5761224a611f93565b5b612257858286016121c0565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561229d578082015181840152602081019050612282565b838111156122ac576000848401525b50505050565b60006122bd82612263565b6122c7818561226e565b93506122d781856020860161227f565b6122e081611fa2565b840191505092915050565b6000602082019050818103600083015261230581846122b2565b905092915050565b6000819050919050565b6123208161230d565b811461232b57600080fd5b50565b60008135905061233d81612317565b92915050565b60006020828403121561235957612358611f8e565b5b60006123678482850161232e565b91505092915050565b60008083601f84011261238657612385611f98565b5b8235905067ffffffffffffffff8111156123a3576123a26121b6565b5b6020830191508360018202830111156123bf576123be6121bb565b5b9250929050565b6000819050826020600802820111156123e2576123e16121bb565b5b92915050565b600080600080600080610180878903121561240657612405611f8e565b5b600087013567ffffffffffffffff81111561242457612423611f93565b5b61243089828a01612370565b9650965050602061244389828a0161213e565b945050604061245489828a0161232e565b935050606061246589828a0161232e565b925050608061247689828a016123c6565b9150509295509295509295565b60008151905061249281612317565b92915050565b6000602082840312156124ae576124ad611f8e565b5b60006124bc84828501612483565b91505092915050565b6124ce8161230d565b82525050565b60006040820190506124e96000830185611f23565b6124f660208301846124c5565b9392505050565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b600061253360108361226e565b915061253e826124fd565b602082019050919050565b6000602082019050818103600083015261256281612526565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125d28261230d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561260557612604612598565b5b600182019050919050565b600060208201905061262560008301846124c5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061267257607f821691505b602082108114156126865761268561262b565b5b50919050565b7f63616c6c6572206973206e6f742061206d6f64657261746f72206f72206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b60006126e860228361226e565b91506126f38261268c565b604082019050919050565b60006020820190508181036000830152612717816126db565b9050919050565b7f73656e64657220646f65736e74206861766520656e6f7567682066756e647300600082015250565b6000612754601f8361226e565b915061275f8261271e565b602082019050919050565b6000602082019050818103600083015261278381612747565b9050919050565b600060608201905061279f6000830186611f23565b6127ac6020830185611f23565b6127b960408301846124c5565b949350505050565b6127ca81612180565b81146127d557600080fd5b50565b6000815190506127e7816127c1565b92915050565b60006020828403121561280357612802611f8e565b5b6000612811848285016127d8565b91505092915050565b7f6d6178206e756d626572206f66206d6f64732069732035000000000000000000600082015250565b600061285060178361226e565b915061285b8261281a565b602082019050919050565b6000602082019050818103600083015261287f81612843565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006128e260268361226e565b91506128ed82612886565b604082019050919050565b60006020820190508181036000830152612911816128d5565b9050919050565b60006129238261230d565b915061292e8361230d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561296757612966612598565b5b828202905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006129a860208361226e565b91506129b382612972565b602082019050919050565b600060208201905081810360008301526129d78161299b565b9050919050565b60008160601b9050919050565b60006129f6826129de565b9050919050565b6000612a08826129eb565b9050919050565b612a20612a1b82611e5d565b6129fd565b82525050565b6000612a328284612a0f565b60148201915081905092915050565b600081905092915050565b60008190508160005260206000209050919050565b60008154612a6e8161265a565b612a788186612a41565b94506001821660008114612a935760018114612aa457612ad7565b60ff19831686528186019350612ad7565b612aad85612a4c565b60005b83811015612acf57815481890152600182019150602081019050612ab0565b838801955050505b50505092915050565b6000612aec8284612a61565b915081905092915050565b612b04610100838361205f565b5050565b60006101a082019050612b1e60008301896124c5565b612b2b60208301886124c5565b612b3860408301876124c5565b612b4560608301866124c5565b612b5260808301856124c5565b612b5f60a0830184612af7565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ba48261230d565b9150612baf8361230d565b925082612bbf57612bbe612b6a565b5b828204905092915050565b600081519050919050565b600081905092915050565b6000612beb82612bca565b612bf58185612bd5565b9350612c0581856020860161227f565b80840191505092915050565b6000612c1d8284612be0565b91508190509291505056fea2646970667358221220b6451139c5bea6e8adcb1b4bfbc904dc05e9e2c3ede145b3368bc7ebee55b67f64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c80637e4e61d7116100b6578063ab37f4861161006f578063ab37f4861461042c578063c00af42c14610469578063e07540e4146104a6578063f0f44260146104cf578063f2fde38b146104f8578063fb2eb1ee1461052157610140565b80637e4e61d714610317578063846d0bb91461034257806384fc28e41461035e5780638988b284146103875780638da5cb5b146103c4578063a230c524146103ef57610140565b80635dcce7ed116101085780635dcce7ed1461022c5780636247f6f21461024857806366b9b5631461027157806369d5f38a146102ae578063715018a6146102d75780637adbf973146102ee57610140565b80633b33ac321461014557806348b49cbf146101705780634d078f481461019b5780634e1b8e4a146101c657806354e68454146101ef575b600080fd5b34801561015157600080fd5b5061015a61054c565b6040516101679190611f01565b60405180910390f35b34801561017c57600080fd5b506101856105da565b6040516101929190611f32565b60405180910390f35b3480156101a757600080fd5b506101b0610600565b6040516101bd9190611f69565b60405180910390f35b3480156101d257600080fd5b506101ed60048036038101906101e891906120de565b610613565b005b3480156101fb57600080fd5b5061021660048036038101906102119190612153565b6107cf565b604051610223919061219b565b60405180910390f35b61024660048036038101906102419190612216565b6107ef565b005b34801561025457600080fd5b5061026f600480360381019061026a9190612153565b6109c5565b005b34801561027d57600080fd5b5061029860048036038101906102939190612153565b610a8b565b6040516102a591906122eb565b60405180910390f35b3480156102ba57600080fd5b506102d560048036038101906102d09190612343565b610b2b565b005b3480156102e357600080fd5b506102ec610cbb565b005b3480156102fa57600080fd5b5061031560048036038101906103109190612153565b610ccf565b005b34801561032357600080fd5b5061032c610d1b565b6040516103399190611f32565b60405180910390f35b61035c600480360381019061035791906123e8565b610d41565b005b34801561036a57600080fd5b5061038560048036038101906103809190612153565b610f4c565b005b34801561039357600080fd5b506103ae60048036038101906103a99190612153565b61131b565b6040516103bb919061219b565b60405180910390f35b3480156103d057600080fd5b506103d961133b565b6040516103e69190611f32565b60405180910390f35b3480156103fb57600080fd5b5061041660048036038101906104119190612153565b611364565b604051610423919061219b565b60405180910390f35b34801561043857600080fd5b50610453600480360381019061044e9190612153565b6114ab565b604051610460919061219b565b60405180910390f35b34801561047557600080fd5b50610490600480360381019061048b9190612343565b6114cb565b60405161049d9190611f32565b60405180910390f35b3480156104b257600080fd5b506104cd60048036038101906104c89190612216565b61150a565b005b3480156104db57600080fd5b506104f660048036038101906104f19190612153565b6117e3565b005b34801561050457600080fd5b5061051f600480360381019061051a9190612153565b61182f565b005b34801561052d57600080fd5b506105366118b3565b6040516105439190611f01565b60405180910390f35b606060068054806020026020016040519081016040528092919081815260200182805480156105d057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610586575b5050505050905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900460ff1681565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190610666929190611c5e565b50600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631803aa33336040518263ffffffff1660e01b81526004016106c29190611f32565b600060405180830381600087803b1580156106dc57600080fd5b505af11580156106f0573d6000803e3d6000fd5b505050507f8d4d6f2f21dc1bb70970c184fb4ec2a9c346592fa565b810bb14bd791d65b1d333600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e413e2bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561077e57600080fd5b505afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190612498565b6040516107c49291906124d4565b60405180910390a150565b60026020528060005260406000206000915054906101000a900460ff1681565b60008282905090506108a9600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e413e2bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561086257600080fd5b505afa158015610876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089a9190612498565b8261194190919063ffffffff16565b3410156108eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e290612549565b60405180910390fd5b60005b818110156109885760016002600086868581811061090f5761090e612569565b5b90506020020160208101906109249190612153565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610980906125c7565b9150506108ee565b507fa90ad43b37352ebc1e46954a3f2d064584b9afe4c9dbb1f88d191260e12a410e816040516109b89190612610565b60405180910390a1505050565b6109cd611957565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506009819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60016020528060005260406000206000915090508054610aaa9061265a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad69061265a565b8015610b235780601f10610af857610100808354040283529160200191610b23565b820191906000526020600020905b815481529060010190602001808311610b0657829003601f168201915b505050505081565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680610bb557503373ffffffffffffffffffffffffffffffffffffffff16610b9d61133b565b73ffffffffffffffffffffffffffffffffffffffff16145b610bf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610beb906126fe565b60405180910390fd5b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630249d624826040518263ffffffff1660e01b8152600401610c4f9190612610565b600060405180830381600087803b158015610c6957600080fd5b505af1158015610c7d573d6000803e3d6000fd5b505050507fe3b51bfc59d6e44e4da024e028d277b0284e6695cce36d919aea83e2c7de284381604051610cb09190612610565b60405180910390a150565b610cc3611957565b610ccd60006119d5565b565b610cd7611957565b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e413e2bc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610da957600080fd5b505afa158015610dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de19190612498565b341015610e23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1a90612549565b60405180910390fd5b610e2f84848484611a99565b8585600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209190610e7d929190611ce4565b50600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631803aa33336040518263ffffffff1660e01b8152600401610ed99190611f32565b600060405180830381600087803b158015610ef357600080fd5b505af1158015610f07573d6000803e3d6000fd5b505050507f8d4d6f2f21dc1bb70970c184fb4ec2a9c346592fa565b810bb14bd791d65b1d33334604051610f3c9291906124d4565b60405180910390a1505050505050565b600061109f600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e413e2bc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fb957600080fd5b505afa158015610fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff19190612498565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663858b033d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561105957600080fd5b505afa15801561106d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110919190612498565b61194190919063ffffffff16565b905061115e600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8e5573b846040518263ffffffff1660e01b81526004016110ff9190611f32565b60206040518083038186803b15801561111757600080fd5b505afa15801561112b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114f9190612498565b82611c0990919063ffffffff16565b9050808273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161119a9190611f32565b60206040518083038186803b1580156111b257600080fd5b505afa1580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea9190612498565b1161122a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112219061276a565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd33600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b81526004016112899392919061278a565b602060405180830381600087803b1580156112a357600080fd5b505af11580156112b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112db91906127ed565b507fe0bf1c581d8916d934fab2546c88910c470fa1e61d274e90b48df83d7f60c01033838360405161130f9392919061278a565b60405180910390a15050565b60036020528060005260406000206000915054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016113c29190611f32565b60206040518083038186803b1580156113da57600080fd5b505afa1580156113ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114129190612498565b118061145057508173ffffffffffffffffffffffffffffffffffffffff1661143861133b565b73ffffffffffffffffffffffffffffffffffffffff16145b806114a45750600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b9050919050565b60046020528060005260406000206000915054906101000a900460ff1681565b600681815481106114db57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611512611957565b60008282905090506000600680549050905060008267ffffffffffffffff8111156115405761153f611fb3565b5b60405190808252806020026020018201604052801561156e5781602001602082028036833780820191505090505b509050600560009054906101000a900460ff1660ff168311156115c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bd90612866565b60405180910390fd5b60005b8281101561167a57600060036000600684815481106115eb576115ea612569565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611672906125c7565b9150506115c9565b5060005b8381101561178d5785858281811061169957611698612569565b5b90506020020160208101906116ae9190612153565b8282815181106116c1576116c0612569565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060016003600088888581811061171457611713612569565b5b90506020020160208101906117299190612153565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611785906125c7565b91505061167e565b5080600690805190602001906117a4929190611d6a565b507f271382085bd3790c7702e021ba0fc6d8369de53f765d04ffcd8fd3c75cde0fea816040516117d49190611f01565b60405180910390a15050505050565b6117eb611957565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611837611957565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189e906128f8565b60405180910390fd5b6118b0816119d5565b50565b6060600980548060200260200160405190810160405280929190818152602001828054801561193757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116118ed575b5050505050905090565b6000818361194f9190612918565b905092915050565b61195f611c1f565b73ffffffffffffffffffffffffffffffffffffffff1661197d61133b565b73ffffffffffffffffffffffffffffffffffffffff16146119d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ca906129be565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600d600083815260200190815260200160002060009054906101000a900460ff1615611af1576040517f5d904cb200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633bc778e384600c54611b5b88604051602001611b479190612a26565b604051602081830303815290604052611c27565b86611b85600b604051602001611b719190612ae0565b604051602081830303815290604052611c27565b876040518763ffffffff1660e01b8152600401611ba796959493929190612b08565b60006040518083038186803b158015611bbf57600080fd5b505afa158015611bd3573d6000803e3d6000fd5b505050506001600d600084815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b60008183611c179190612b99565b905092915050565b600033905090565b6000600882604051602001611c3c9190612c11565b6040516020818303038152906040528051906020012060001c901c9050919050565b828054611c6a9061265a565b90600052602060002090601f016020900481019282611c8c5760008555611cd3565b82601f10611ca557805160ff1916838001178555611cd3565b82800160010185558215611cd3579182015b82811115611cd2578251825591602001919060010190611cb7565b5b509050611ce09190611df4565b5090565b828054611cf09061265a565b90600052602060002090601f016020900481019282611d125760008555611d59565b82601f10611d2b57803560ff1916838001178555611d59565b82800160010185558215611d59579182015b82811115611d58578235825591602001919060010190611d3d565b5b509050611d669190611df4565b5090565b828054828255906000526020600020908101928215611de3579160200282015b82811115611de25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611d8a565b5b509050611df09190611df4565b5090565b5b80821115611e0d576000816000905550600101611df5565b5090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e6882611e3d565b9050919050565b611e7881611e5d565b82525050565b6000611e8a8383611e6f565b60208301905092915050565b6000602082019050919050565b6000611eae82611e11565b611eb88185611e1c565b9350611ec383611e2d565b8060005b83811015611ef4578151611edb8882611e7e565b9750611ee683611e96565b925050600181019050611ec7565b5085935050505092915050565b60006020820190508181036000830152611f1b8184611ea3565b905092915050565b611f2c81611e5d565b82525050565b6000602082019050611f476000830184611f23565b92915050565b600060ff82169050919050565b611f6381611f4d565b82525050565b6000602082019050611f7e6000830184611f5a565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611feb82611fa2565b810181811067ffffffffffffffff8211171561200a57612009611fb3565b5b80604052505050565b600061201d611f84565b90506120298282611fe2565b919050565b600067ffffffffffffffff82111561204957612048611fb3565b5b61205282611fa2565b9050602081019050919050565b82818337600083830152505050565b600061208161207c8461202e565b612013565b90508281526020810184848401111561209d5761209c611f9d565b5b6120a884828561205f565b509392505050565b600082601f8301126120c5576120c4611f98565b5b81356120d584826020860161206e565b91505092915050565b6000602082840312156120f4576120f3611f8e565b5b600082013567ffffffffffffffff81111561211257612111611f93565b5b61211e848285016120b0565b91505092915050565b61213081611e5d565b811461213b57600080fd5b50565b60008135905061214d81612127565b92915050565b60006020828403121561216957612168611f8e565b5b60006121778482850161213e565b91505092915050565b60008115159050919050565b61219581612180565b82525050565b60006020820190506121b0600083018461218c565b92915050565b600080fd5b600080fd5b60008083601f8401126121d6576121d5611f98565b5b8235905067ffffffffffffffff8111156121f3576121f26121b6565b5b60208301915083602082028301111561220f5761220e6121bb565b5b9250929050565b6000806020838503121561222d5761222c611f8e565b5b600083013567ffffffffffffffff81111561224b5761224a611f93565b5b612257858286016121c0565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561229d578082015181840152602081019050612282565b838111156122ac576000848401525b50505050565b60006122bd82612263565b6122c7818561226e565b93506122d781856020860161227f565b6122e081611fa2565b840191505092915050565b6000602082019050818103600083015261230581846122b2565b905092915050565b6000819050919050565b6123208161230d565b811461232b57600080fd5b50565b60008135905061233d81612317565b92915050565b60006020828403121561235957612358611f8e565b5b60006123678482850161232e565b91505092915050565b60008083601f84011261238657612385611f98565b5b8235905067ffffffffffffffff8111156123a3576123a26121b6565b5b6020830191508360018202830111156123bf576123be6121bb565b5b9250929050565b6000819050826020600802820111156123e2576123e16121bb565b5b92915050565b600080600080600080610180878903121561240657612405611f8e565b5b600087013567ffffffffffffffff81111561242457612423611f93565b5b61243089828a01612370565b9650965050602061244389828a0161213e565b945050604061245489828a0161232e565b935050606061246589828a0161232e565b925050608061247689828a016123c6565b9150509295509295509295565b60008151905061249281612317565b92915050565b6000602082840312156124ae576124ad611f8e565b5b60006124bc84828501612483565b91505092915050565b6124ce8161230d565b82525050565b60006040820190506124e96000830185611f23565b6124f660208301846124c5565b9392505050565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b600061253360108361226e565b915061253e826124fd565b602082019050919050565b6000602082019050818103600083015261256281612526565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125d28261230d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561260557612604612598565b5b600182019050919050565b600060208201905061262560008301846124c5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061267257607f821691505b602082108114156126865761268561262b565b5b50919050565b7f63616c6c6572206973206e6f742061206d6f64657261746f72206f72206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b60006126e860228361226e565b91506126f38261268c565b604082019050919050565b60006020820190508181036000830152612717816126db565b9050919050565b7f73656e64657220646f65736e74206861766520656e6f7567682066756e647300600082015250565b6000612754601f8361226e565b915061275f8261271e565b602082019050919050565b6000602082019050818103600083015261278381612747565b9050919050565b600060608201905061279f6000830186611f23565b6127ac6020830185611f23565b6127b960408301846124c5565b949350505050565b6127ca81612180565b81146127d557600080fd5b50565b6000815190506127e7816127c1565b92915050565b60006020828403121561280357612802611f8e565b5b6000612811848285016127d8565b91505092915050565b7f6d6178206e756d626572206f66206d6f64732069732035000000000000000000600082015250565b600061285060178361226e565b915061285b8261281a565b602082019050919050565b6000602082019050818103600083015261287f81612843565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006128e260268361226e565b91506128ed82612886565b604082019050919050565b60006020820190508181036000830152612911816128d5565b9050919050565b60006129238261230d565b915061292e8361230d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561296757612966612598565b5b828202905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006129a860208361226e565b91506129b382612972565b602082019050919050565b600060208201905081810360008301526129d78161299b565b9050919050565b60008160601b9050919050565b60006129f6826129de565b9050919050565b6000612a08826129eb565b9050919050565b612a20612a1b82611e5d565b6129fd565b82525050565b6000612a328284612a0f565b60148201915081905092915050565b600081905092915050565b60008190508160005260206000209050919050565b60008154612a6e8161265a565b612a788186612a41565b94506001821660008114612a935760018114612aa457612ad7565b60ff19831686528186019350612ad7565b612aad85612a4c565b60005b83811015612acf57815481890152600182019150602081019050612ab0565b838801955050505b50505092915050565b6000612aec8284612a61565b915081905092915050565b612b04610100838361205f565b5050565b60006101a082019050612b1e60008301896124c5565b612b2b60208301886124c5565b612b3860408301876124c5565b612b4560608301866124c5565b612b5260808301856124c5565b612b5f60a0830184612af7565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ba48261230d565b9150612baf8361230d565b925082612bbf57612bbe612b6a565b5b828204905092915050565b600081519050919050565b600081905092915050565b6000612beb82612bca565b612bf58185612bd5565b9350612c0581856020860161227f565b80840191505092915050565b6000612c1d8284612be0565b91508190509291505056fea2646970667358221220b6451139c5bea6e8adcb1b4bfbc904dc05e9e2c3ede145b3368bc7ebee55b67f64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "joinWithERC20(address)": {
        "details": "function to join with any token** @note this is a dummy function, we need to modify according to number of decimals*"
      },
      "joinWithoutEth(string)": {
        "details": "DUMMY FUNCTION** @note this function is for hackathon, allows to test the integration of our contract.  uncomment first line of the function will work along with payForTeam function.*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "worldId": {
        "details": "worldcoin verification*"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4117,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "UserInfoURI",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 4121,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "usersPaid",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4125,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "isMod",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4129,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "isWhitelistedToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4132,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "modLimit",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 4135,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "membership",
        "offset": 1,
        "slot": "5",
        "type": "t_contract(ILepakMembership)4026"
      },
      {
        "astId": 4138,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "mods",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4140,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "oracleAddr",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4142,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "treasury_addr",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4145,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "whitelistedToken",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4149,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "worldId",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IWorldID)4047"
      },
      {
        "astId": 4151,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "action_id",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 4154,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "groupId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4158,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILepakMembership)4026": {
        "encoding": "inplace",
        "label": "contract ILepakMembership",
        "numberOfBytes": "20"
      },
      "t_contract(IWorldID)4047": {
        "encoding": "inplace",
        "label": "contract IWorldID",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}