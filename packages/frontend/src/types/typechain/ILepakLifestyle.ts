/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common'

export declare namespace ILepakLifestyle {
  export type LepakStayStruct = {
    addr: PromiseOrValue<string>
    dateJoined: PromiseOrValue<BigNumberish>
  }

  export type LepakStayStructOutput = [string, BigNumber] & {
    addr: string
    dateJoined: BigNumber
  }
}

export interface ILepakLifestyleInterface extends utils.Interface {
  functions: {
    'addStay()': FunctionFragment
    'applyForStay()': FunctionFragment
    'getStay(uint256)': FunctionFragment
    'removeStay()': FunctionFragment
    'reviewForStay()': FunctionFragment
    'whitelistForStay()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'addStay'
      | 'applyForStay'
      | 'getStay'
      | 'removeStay'
      | 'reviewForStay'
      | 'whitelistForStay'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'addStay', values?: undefined): string
  encodeFunctionData(functionFragment: 'applyForStay', values?: undefined): string
  encodeFunctionData(functionFragment: 'getStay', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'removeStay', values?: undefined): string
  encodeFunctionData(functionFragment: 'reviewForStay', values?: undefined): string
  encodeFunctionData(functionFragment: 'whitelistForStay', values?: undefined): string

  decodeFunctionResult(functionFragment: 'addStay', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'applyForStay', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getStay', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removeStay', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'reviewForStay', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'whitelistForStay', data: BytesLike): Result

  events: {}
}

export interface ILepakLifestyle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: ILepakLifestyleInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    addStay(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    applyForStay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getStay(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILepakLifestyle.LepakStayStructOutput]>

    removeStay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    reviewForStay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    whitelistForStay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  addStay(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  applyForStay(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getStay(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILepakLifestyle.LepakStayStructOutput>

  removeStay(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  reviewForStay(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  whitelistForStay(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    addStay(overrides?: CallOverrides): Promise<void>

    applyForStay(overrides?: CallOverrides): Promise<void>

    getStay(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILepakLifestyle.LepakStayStructOutput>

    removeStay(overrides?: CallOverrides): Promise<void>

    reviewForStay(overrides?: CallOverrides): Promise<void>

    whitelistForStay(overrides?: CallOverrides): Promise<void>
  }

  filters: {}

  estimateGas: {
    addStay(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    applyForStay(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    getStay(idx: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    removeStay(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    reviewForStay(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    whitelistForStay(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>
  }

  populateTransaction: {
    addStay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    applyForStay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getStay(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    removeStay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    reviewForStay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    whitelistForStay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
