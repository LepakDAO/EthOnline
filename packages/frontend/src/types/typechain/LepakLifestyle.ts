/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common'

export interface LepakLifestyleInterface extends utils.Interface {
  functions: {
    'addStay(string,uint256[])': FunctionFragment
    'applyForStay(uint256)': FunctionFragment
    'approveForStay(uint256,address[])': FunctionFragment
    'coreContract()': FunctionFragment
    'isApprovedForStay(uint256,address)': FunctionFragment
    'owner()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'stayApplications(uint256,uint256)': FunctionFragment
    'stays(uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'addStay'
      | 'applyForStay'
      | 'approveForStay'
      | 'coreContract'
      | 'isApprovedForStay'
      | 'owner'
      | 'renounceOwnership'
      | 'stayApplications'
      | 'stays'
      | 'transferOwnership'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'addStay',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string
  encodeFunctionData(
    functionFragment: 'applyForStay',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'approveForStay',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string
  encodeFunctionData(functionFragment: 'coreContract', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'isApprovedForStay',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'stayApplications',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'stays', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string

  decodeFunctionResult(functionFragment: 'addStay', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'applyForStay', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approveForStay', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'coreContract', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isApprovedForStay', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stayApplications', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stays', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result

  events: {
    'AppliedForStay(address,uint256)': EventFragment
    'ApprovedForStay(address,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'StayAdded(string)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AppliedForStay'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ApprovedForStay'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'StayAdded'): EventFragment
}

export interface AppliedForStayEventObject {
  user: string
  hh_index: BigNumber
}
export type AppliedForStayEvent = TypedEvent<[string, BigNumber], AppliedForStayEventObject>

export type AppliedForStayEventFilter = TypedEventFilter<AppliedForStayEvent>

export interface ApprovedForStayEventObject {
  user: string
  hh_index: BigNumber
}
export type ApprovedForStayEvent = TypedEvent<[string, BigNumber], ApprovedForStayEventObject>

export type ApprovedForStayEventFilter = TypedEventFilter<ApprovedForStayEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface StayAddedEventObject {
  hh_uri: string
}
export type StayAddedEvent = TypedEvent<[string], StayAddedEventObject>

export type StayAddedEventFilter = TypedEventFilter<StayAddedEvent>

export interface LepakLifestyle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: LepakLifestyleInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    addStay(
      stayURI: PromiseOrValue<string>,
      _pricesPerRoom: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    applyForStay(
      _stayId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    approveForStay(
      _stayId: PromiseOrValue<BigNumberish>,
      _applicants: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    coreContract(overrides?: CallOverrides): Promise<[string]>

    isApprovedForStay(
      _stayId: PromiseOrValue<BigNumberish>,
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    owner(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    stayApplications(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>

    stays(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { stayURI: string }>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  addStay(
    stayURI: PromiseOrValue<string>,
    _pricesPerRoom: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  applyForStay(
    _stayId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  approveForStay(
    _stayId: PromiseOrValue<BigNumberish>,
    _applicants: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  coreContract(overrides?: CallOverrides): Promise<string>

  isApprovedForStay(
    _stayId: PromiseOrValue<BigNumberish>,
    _member: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  owner(overrides?: CallOverrides): Promise<string>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  stayApplications(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  stays(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    addStay(
      stayURI: PromiseOrValue<string>,
      _pricesPerRoom: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>

    applyForStay(_stayId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    approveForStay(
      _stayId: PromiseOrValue<BigNumberish>,
      _applicants: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>

    coreContract(overrides?: CallOverrides): Promise<string>

    isApprovedForStay(
      _stayId: PromiseOrValue<BigNumberish>,
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    stayApplications(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    stays(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'AppliedForStay(address,uint256)'(user?: null, hh_index?: null): AppliedForStayEventFilter
    AppliedForStay(user?: null, hh_index?: null): AppliedForStayEventFilter

    'ApprovedForStay(address,uint256)'(user?: null, hh_index?: null): ApprovedForStayEventFilter
    ApprovedForStay(user?: null, hh_index?: null): ApprovedForStayEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    'StayAdded(string)'(hh_uri?: null): StayAddedEventFilter
    StayAdded(hh_uri?: null): StayAddedEventFilter
  }

  estimateGas: {
    addStay(
      stayURI: PromiseOrValue<string>,
      _pricesPerRoom: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    applyForStay(
      _stayId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    approveForStay(
      _stayId: PromiseOrValue<BigNumberish>,
      _applicants: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    coreContract(overrides?: CallOverrides): Promise<BigNumber>

    isApprovedForStay(
      _stayId: PromiseOrValue<BigNumberish>,
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    stayApplications(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    stays(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    addStay(
      stayURI: PromiseOrValue<string>,
      _pricesPerRoom: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    applyForStay(
      _stayId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    approveForStay(
      _stayId: PromiseOrValue<BigNumberish>,
      _applicants: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    coreContract(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isApprovedForStay(
      _stayId: PromiseOrValue<BigNumberish>,
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    stayApplications(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    stays(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
