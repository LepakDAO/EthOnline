/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers'
import type { Provider } from '@ethersproject/providers'
import type { ILepak, ILepakInterface } from '../ILepak'

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newMod',
        type: 'address',
      },
    ],
    name: 'changeMods',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'idx',
        type: 'uint256',
      },
    ],
    name: 'getDaoMember',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'addr',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'dateJoined',
            type: 'uint256',
          },
        ],
        internalType: 'struct ILepak.DaoMember',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'idx',
        type: 'uint256',
      },
    ],
    name: 'getProposal',
    outputs: [
      {
        internalType: 'bytes32',
        name: 'ipfsURI',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'joinDAO',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'proposalIdx',
        type: 'uint256',
      },
    ],
    name: 'reviewProposal',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'ipfsURI',
        type: 'bytes32',
      },
    ],
    name: 'submitProposal',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

export class ILepak__factory {
  static readonly abi = _abi
  static createInterface(): ILepakInterface {
    return new utils.Interface(_abi) as ILepakInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ILepak {
    return new Contract(address, _abi, signerOrProvider) as ILepak
  }
}
