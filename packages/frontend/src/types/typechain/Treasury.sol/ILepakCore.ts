/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../common'

export interface ILepakCoreInterface extends utils.Interface {
  functions: {
    'getwhitelistedToken()': FunctionFragment
  }

  getFunction(nameOrSignatureOrTopic: 'getwhitelistedToken'): FunctionFragment

  encodeFunctionData(functionFragment: 'getwhitelistedToken', values?: undefined): string

  decodeFunctionResult(functionFragment: 'getwhitelistedToken', data: BytesLike): Result

  events: {}
}

export interface ILepakCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: ILepakCoreInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    getwhitelistedToken(overrides?: CallOverrides): Promise<[string[]]>
  }

  getwhitelistedToken(overrides?: CallOverrides): Promise<string[]>

  callStatic: {
    getwhitelistedToken(overrides?: CallOverrides): Promise<string[]>
  }

  filters: {}

  estimateGas: {
    getwhitelistedToken(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    getwhitelistedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
