/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../common'

export interface EthTellorOracleInterface extends utils.Interface {
  functions: {
    'EthPrice()': FunctionFragment
    '_tellorAddress()': FunctionFragment
    'ethQueryId()': FunctionFragment
    'getCurrentEthPrice()': FunctionFragment
    'getCurrentValue(bytes32)': FunctionFragment
    'getDataBefore(bytes32,uint256)': FunctionFragment
    'getIndexForDataBefore(bytes32,uint256)': FunctionFragment
    'getNewValueCountbyQueryId(bytes32)': FunctionFragment
    'getTimestampbyQueryIdandIndex(bytes32,uint256)': FunctionFragment
    'isInDispute(bytes32,uint256)': FunctionFragment
    'retrieveData(bytes32,uint256)': FunctionFragment
    'tellor()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'EthPrice'
      | '_tellorAddress'
      | 'ethQueryId'
      | 'getCurrentEthPrice'
      | 'getCurrentValue'
      | 'getDataBefore'
      | 'getIndexForDataBefore'
      | 'getNewValueCountbyQueryId'
      | 'getTimestampbyQueryIdandIndex'
      | 'isInDispute'
      | 'retrieveData'
      | 'tellor'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'EthPrice', values?: undefined): string
  encodeFunctionData(functionFragment: '_tellorAddress', values?: undefined): string
  encodeFunctionData(functionFragment: 'ethQueryId', values?: undefined): string
  encodeFunctionData(functionFragment: 'getCurrentEthPrice', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getCurrentValue',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'getDataBefore',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getIndexForDataBefore',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getNewValueCountbyQueryId',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'getTimestampbyQueryIdandIndex',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'isInDispute',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'retrieveData',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'tellor', values?: undefined): string

  decodeFunctionResult(functionFragment: 'EthPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: '_tellorAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ethQueryId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getCurrentEthPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getCurrentValue', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getDataBefore', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getIndexForDataBefore', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNewValueCountbyQueryId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getTimestampbyQueryIdandIndex', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isInDispute', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'retrieveData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tellor', data: BytesLike): Result

  events: {}
}

export interface EthTellorOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: EthTellorOracleInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    EthPrice(overrides?: CallOverrides): Promise<[BigNumber]>

    _tellorAddress(overrides?: CallOverrides): Promise<[string]>

    ethQueryId(overrides?: CallOverrides): Promise<[string]>

    getCurrentEthPrice(overrides?: CallOverrides): Promise<[BigNumber] & { value: BigNumber }>

    getCurrentValue(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber] & {
        _ifRetrieve: boolean
        _value: string
        _timestampRetrieved: BigNumber
      }
    >

    getDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber] & {
        _ifRetrieve: boolean
        _value: string
        _timestampRetrieved: BigNumber
      }
    >

    getIndexForDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { _found: boolean; _index: BigNumber }>

    getNewValueCountbyQueryId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getTimestampbyQueryIdandIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    isInDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    retrieveData(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>

    tellor(overrides?: CallOverrides): Promise<[string]>
  }

  EthPrice(overrides?: CallOverrides): Promise<BigNumber>

  _tellorAddress(overrides?: CallOverrides): Promise<string>

  ethQueryId(overrides?: CallOverrides): Promise<string>

  getCurrentEthPrice(overrides?: CallOverrides): Promise<BigNumber>

  getCurrentValue(
    _queryId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber] & {
      _ifRetrieve: boolean
      _value: string
      _timestampRetrieved: BigNumber
    }
  >

  getDataBefore(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber] & {
      _ifRetrieve: boolean
      _value: string
      _timestampRetrieved: BigNumber
    }
  >

  getIndexForDataBefore(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { _found: boolean; _index: BigNumber }>

  getNewValueCountbyQueryId(
    _queryId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getTimestampbyQueryIdandIndex(
    _queryId: PromiseOrValue<BytesLike>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  isInDispute(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>

  retrieveData(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  tellor(overrides?: CallOverrides): Promise<string>

  callStatic: {
    EthPrice(overrides?: CallOverrides): Promise<BigNumber>

    _tellorAddress(overrides?: CallOverrides): Promise<string>

    ethQueryId(overrides?: CallOverrides): Promise<string>

    getCurrentEthPrice(overrides?: CallOverrides): Promise<BigNumber>

    getCurrentValue(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber] & {
        _ifRetrieve: boolean
        _value: string
        _timestampRetrieved: BigNumber
      }
    >

    getDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber] & {
        _ifRetrieve: boolean
        _value: string
        _timestampRetrieved: BigNumber
      }
    >

    getIndexForDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { _found: boolean; _index: BigNumber }>

    getNewValueCountbyQueryId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTimestampbyQueryIdandIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isInDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>

    retrieveData(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    tellor(overrides?: CallOverrides): Promise<string>
  }

  filters: {}

  estimateGas: {
    EthPrice(overrides?: CallOverrides): Promise<BigNumber>

    _tellorAddress(overrides?: CallOverrides): Promise<BigNumber>

    ethQueryId(overrides?: CallOverrides): Promise<BigNumber>

    getCurrentEthPrice(overrides?: CallOverrides): Promise<BigNumber>

    getCurrentValue(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getIndexForDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNewValueCountbyQueryId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTimestampbyQueryIdandIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isInDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    retrieveData(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    tellor(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    EthPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

    _tellorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ethQueryId(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getCurrentEthPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getCurrentValue(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getIndexForDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNewValueCountbyQueryId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTimestampbyQueryIdandIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isInDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    retrieveData(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    tellor(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
