/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common'

export declare namespace ILepak {
  export type DaoMemberStruct = {
    addr: PromiseOrValue<string>
    dateJoined: PromiseOrValue<BigNumberish>
  }

  export type DaoMemberStructOutput = [string, BigNumber] & {
    addr: string
    dateJoined: BigNumber
  }
}

export interface ILepakInterface extends utils.Interface {
  functions: {
    'changeMods(address)': FunctionFragment
    'getDaoMember(uint256)': FunctionFragment
    'getProposal(uint256)': FunctionFragment
    'joinDAO()': FunctionFragment
    'reviewProposal(uint256)': FunctionFragment
    'submitProposal(bytes32)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'changeMods'
      | 'getDaoMember'
      | 'getProposal'
      | 'joinDAO'
      | 'reviewProposal'
      | 'submitProposal'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'changeMods', values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: 'getDaoMember',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getProposal',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'joinDAO', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'reviewProposal',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'submitProposal',
    values: [PromiseOrValue<BytesLike>]
  ): string

  decodeFunctionResult(functionFragment: 'changeMods', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getDaoMember', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getProposal', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'joinDAO', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'reviewProposal', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'submitProposal', data: BytesLike): Result

  events: {}
}

export interface ILepak extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: ILepakInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    changeMods(
      newMod: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getDaoMember(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILepak.DaoMemberStructOutput]>

    getProposal(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { ipfsURI: string }>

    joinDAO(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    reviewProposal(
      proposalIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    submitProposal(
      ipfsURI: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  changeMods(
    newMod: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getDaoMember(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILepak.DaoMemberStructOutput>

  getProposal(idx: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

  joinDAO(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  reviewProposal(
    proposalIdx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  submitProposal(
    ipfsURI: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    changeMods(newMod: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    getDaoMember(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILepak.DaoMemberStructOutput>

    getProposal(idx: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

    joinDAO(overrides?: CallOverrides): Promise<void>

    reviewProposal(
      proposalIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    submitProposal(ipfsURI: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>
  }

  filters: {}

  estimateGas: {
    changeMods(
      newMod: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getDaoMember(idx: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    getProposal(idx: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    joinDAO(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    reviewProposal(
      proposalIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    submitProposal(
      ipfsURI: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    changeMods(
      newMod: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getDaoMember(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getProposal(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    joinDAO(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    reviewProposal(
      proposalIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    submitProposal(
      ipfsURI: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
